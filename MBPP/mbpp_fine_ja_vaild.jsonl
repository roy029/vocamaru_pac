{"in":"from typing import List\n\"\"\"\n文字列からすべての空白を取り除く関数を書きなさい。\n\"\"\"\ndef remove_all_spaces(text):\r\n","out":"return (re.sub(r'\\s+', '',text))"}
{"in":"from typing import List\n\"\"\"\n三角形の周囲長を求める関数を書きなさい。\n\"\"\"\ndef perimeter_triangle(a,b,c):\r\n","out":"perimeter=a+b+c\r\n  return perimeter"}
{"in":"from typing import List\n\"\"\"\n与えられたリストのすべての奇数インデックスが奇数を含むかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef odd_position(nums):\r\n","out":"return all(nums[i]%2==i%2 for i in range(len(nums)))"}
{"in":"from typing import List\n\"\"\"\nスネークケース文字列をキャメルケース文字列に変換する関数を書きなさい。\n\"\"\"\ndef snake_to_camel(word):\r\n","out":"import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"in":"from typing import List\n\"\"\"\n文字列中の母音の数を数える python 関数を書きなさい。\n\"\"\"\ndef Check_Vow(string, vowels): \r\n","out":"final = [each for each in string if each in vowels] \r\n    return(len(final))"}
{"in":"from typing import List\n\"\"\"\nリストの中で最小の数を求める python 関数を書きなさい。\n\"\"\"\ndef smallest_num(xs):\n","out":"return min(xs)"}
{"in":"from typing import List\n\"\"\"\nn番目の直交数を求める関数を書きなさい。\n\"\"\"\ndef find_rect_num(n):\r\n","out":"return n*(n + 1)"}
{"in":"from typing import List\n\"\"\"\n最も短い単語の長さを求める python 関数を書きなさい。\n\"\"\"\ndef len_log(list1):\r\n","out":"min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"}
{"in":"from typing import List\n\"\"\"\n平行四辺形の周囲長を計算する関数を書きなさい。\n\"\"\"\ndef parallelogram_perimeter(b,h):\r\n","out":"perimeter=2*(b*h)\r\n  return perimeter"}
{"in":"from typing import List\n\"\"\"\n精度2の小数をチェックする関数を書きなさい。\n\"\"\"\ndef is_decimal(num):\r\n","out":"import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストのタプル要素の和を求める関数を書きなさい。\n\"\"\"\ndef sum_elements(test_tup):\r\n","out":"res = sum(list(test_tup))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n複数回出現する文字を単一に置き換える python 関数を書きなさい。\n\"\"\"\ndef replace(string, char): \r\n","out":"pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string"}
{"in":"from typing import List\n\"\"\"\n最大和を持つ部分配列の長さを求める関数を書きなさい。\n\"\"\"\ndef max_sub_array_sum(a,size): \r\n","out":"max_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"}
{"in":"from typing import List\n\"\"\"\n2つの数値の最小値を求める python 関数を書きなさい。\n\"\"\"\ndef minimum(a,b):   \r\n","out":"if a <= b: \r\n        return a \r\n    else: \r\n        return b"}
{"in":"from typing import List\n\"\"\"\n与えられたリスト内のタプルのペアから最大積を求める関数を書きなさい。\n\"\"\"\ndef max_product_tuple(list1):\r\n","out":"result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"}
{"in":"from typing import List\n\"\"\"\nソートされた配列の中で、与えられた数値が最後に出現するインデックスを求める関数を書きなさい。\n\"\"\"\ndef find_last_occurrence(A, x):\r\n","out":"(left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) \/\/ 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n三角形が有効かどうかをチェックする関数を書きなさい。\n\"\"\"\ndef validity_triangle(a,b,c):\r\n","out":"total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n文字列中の奇数文字を削除する関数を書きなさい。\n\"\"\"\ndef remove_odd(str1):\r\n","out":"str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"}
{"in":"from typing import List\n\"\"\"\nバイナリサーチを使って、与えられた配列の要素を検索する関数を書きなさい。\n\"\"\"\ndef binary_search(item_list,item):\r\n","out":"first = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)\/\/2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"}
{"in":"from typing import List\n\"\"\"\n文字列の桁数と文字数を計算する関数を書きなさい。\n\"\"\"\ndef dig_let(s):\r\n","out":"d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"}
{"in":"from typing import List\n\"\"\"\n## 与えられた整数の配列に対して、その配列の末尾に到達するための最小ジャンプ回数を求める関数を書く。> インデントされたブロック\n\"\"\"\ndef min_jumps(arr, n):\r\n","out":"jumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、与えられたリストの偶数要素の数を求める関数を書きなさい。\n\"\"\"\ndef count_even(array_nums):\r\n","out":"count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"}
{"in":"from typing import List\n\"\"\"\n逐次検索を使って、与えられた配列の要素を検索する関数を書きなさい。\n\"\"\"\ndef sequential_search(dlist, item):\r\n","out":"pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"}
{"in":"from typing import List\n\"\"\"\n正規表現を使用して、URLから年、月、日付を抽出する関数を作成する。\n\"\"\"\ndef extract_date(url):\r\n","out":"return re.findall(r'\/(\\d{4})\/(\\d{1,2})\/(\\d{1,2})\/', url)"}
{"in":"from typing import List\n\"\"\"\n2つの正の整数のlcmを求めるpython関数を書きなさい。\n\"\"\"\ndef lcm(x, y):\r\n","out":"if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列が同じ文字で始まり、同じ文字で終わるかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_char(string): \r\n","out":"if(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\""}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列を大文字で分割する関数を書きなさい。\n\"\"\"\ndef split_list(text):\r\n","out":"return (re.findall('[A-Z][^A-Z]*', text))"}
{"in":"from typing import List\n\"\"\"\n与えられた集合の中に、和が与えられた和に等しい部分集合があるかどうかを判定する関数を書け。\n\"\"\"\ndef is_subset_sum(set, n, sum):\r\n","out":"if (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列の中から3文字、4文字、5文字の長い単語をすべて見つける関数を書きなさい。\n\"\"\"\ndef find_char(text):\r\n","out":"return (re.findall(r\"\\b\\w{3,5}\\b\", text))"}
{"in":"from typing import List\n\"\"\"\n正四面体の体積を計算する関数を書きなさい。\n\"\"\"\ndef volume_tetrahedron(num):\r\n","out":"volume = (num ** 3 \/ (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列を大文字に変換する python 関数を書きなさい。\n\"\"\"\ndef is_upper(string):\r\n","out":"return (string.upper())"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列の空白をアンダースコアに、あるいはその逆に置き換える関数を書きなさい。\n\"\"\"\ndef replace_spaces(text):\r\n","out":"text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"}
{"in":"from typing import List\n\"\"\"\n次元2 x nの矩形格子について、選ばれた2つの数が隣接しないような最大和を求める関数を書きなさい。\n\"\"\"\ndef max_sum_rectangular_grid(grid, n) : \r\n","out":"incl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルの要素の和を求める関数を書きなさい。\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\r\n","out":"res = tuple(set(test_tup1 + test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の繰り返し要素の和を求める python 関数を書きなさい。\n\"\"\"\ndef find_Sum(arr,n): \r\n","out":"return sum([x for x in arr if arr.count(x) > 1])"}
{"in":"from typing import List\n\"\"\"\n与えられた配列中の数値の頻度を求める python 関数を書きなさい。\n\"\"\"\ndef frequency(a,x): \r\n","out":"count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルのサイズを求める関数を書きなさい。\n\"\"\"\ndef tuple_size(tuple_list):\r\n","out":"return (sys.getsizeof(tuple_list))"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の、隣接する要素を持たない部分配列の最大和を求める関数を書きなさい。\n\"\"\"\ndef max_sum_subseq(A):\r\n","out":"n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"}
{"in":"from typing import List\n\"\"\"\n与えられた配列のピーク要素を求める関数を書きなさい。\n\"\"\"\ndef find_peak_util(arr, low, high, n): \r\n","out":"mid = low + (high - low)\/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n)"}
{"in":"from typing import List\n\"\"\"\nタプルのリストを各タプルの最後の要素で昇順にソートする関数を書きなさい。\n\"\"\"\ndef sort_tuple(tup): \r\n","out":"lst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列の末尾が英数字だけかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_alphanumeric(string): \r\n","out":"if(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\")"}
{"in":"from typing import List\n\"\"\"\n与えられた数の因数の最小和を求める python 関数を書きなさい。\n\"\"\"\ndef find_Min_Sum(num): \r\n","out":"sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num \/= i \r\n        i += 1\r\n    sum += num \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\nタプルの繰り返し項目を数える関数を書きなさい。\n\"\"\"\ndef count_tuplex(tuplex,value):  \r\n","out":"count = tuplex.count(value)\r\n  return count"}
{"in":"from typing import List\n\"\"\"\nn番目のデラノイ数を求める関数を書きなさい。\n\"\"\"\ndef dealnnoy_num(n, m): \r\n","out":"if (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"}
{"in":"from typing import List\n\"\"\"\n最初の n 個の偶数の自然数の 5 乗の和を求める python 関数を書きなさい。\n\"\"\"\ndef even_Power_Sum(n): \r\n","out":"sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum;"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられたスネークケース文字列をキャメルケース文字列に変換する関数を書きなさい。\n\"\"\"\ndef snake_to_camel(word):\r\n","out":"return ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"in":"from typing import List\n\"\"\"\n複数のリストを入れ子辞書に変換する関数を作成しなさい。\n\"\"\"\ndef convert_list_dictionary(l1, l2, l3):\r\n","out":"result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"}
{"in":"from typing import List\n\"\"\"\n与えられたサイズ n*n の正方行列に対して，既存のすべての経路の平均が最大となる経路を求める関数を書け．\n\"\"\"\ndef maxAverageOfPath(cost, N): \r\n","out":"dp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] \/ (2 * N - 1)"}
{"in":"from typing import List\n\"\"\"\n正規表現を使ってyyyy-mm-dd形式の日付をdd-mm-yyyy形式に変換する関数を書きなさい。\n\"\"\"\ndef change_date_format(dt):\r\n","out":"return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"}
{"in":"from typing import List\n\"\"\"\n2つの数値の最大値を求める関数を書きなさい。\n\"\"\"\ndef max_of_two( x, y ):\r\n","out":"if x > y:\r\n        return x\r\n    return y"}
{"in":"from typing import List\n\"\"\"\n与えられた数の桁数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Digit(n):\r\n","out":"count = 0\r\n    while n != 0:\r\n        n \/\/= 10\r\n        count += 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n与えられた数の最初の桁を求める python 関数を書きなさい。\n\"\"\"\ndef first_Digit(n) :  \r\n","out":"while n >= 10:  \r\n        n = n \/ 10; \r\n    return int(n)"}
{"in":"from typing import List\n\"\"\"\n文字列の括弧部分を削除する関数を書きなさい。\n\"\"\"\ndef remove_parenthesis(items):\r\n","out":"for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って奇数をフィルタリングする関数を書きなさい。\n\"\"\"\ndef filter_oddnumbers(nums):\r\n","out":"odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの数の間の完全二乗を求める関数を書きなさい。\n\"\"\"\ndef perfect_squares(a, b):\r\n","out":"lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"}
{"in":"from typing import List\n\"\"\"\nヒープキューアルゴリズムを用いて、与えられた整数配列の3つの数の最大積を計算する関数を書きなさい。\n\"\"\"\ndef maximum_product(nums):\r\n","out":"import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、与えられた配列の正負の数を並べ替える関数を書きなさい。\n\"\"\"\ndef rearrange_numbs(array_nums):\r\n","out":"result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 \/ i)\r\n  return result"}
{"in":"from typing import List\n\"\"\"\n2つの範囲から点を選ぶ python 関数を書きなさい．\n\"\"\"\ndef find_Points(l1,r1,l2,r2): \r\n","out":"x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"}
{"in":"from typing import List\n\"\"\"\n同じ文字列を得るために必要な最小回転数を求める python 関数を書きなさい。\n\"\"\"\ndef find_Rotations(str): \r\n","out":"tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の母音だけを反転させる python 関数を書きなさい。\n\"\"\"\ndef reverse_vowels(str1):\r\n","out":"vowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"}
{"in":"from typing import List\n\"\"\"\n与えられた配列のk番目の要素を見つける関数を書きなさい。\n\"\"\"\ndef kth_element(arr, n, k):\r\n","out":"for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"}
{"in":"from typing import List\n\"\"\"\n二次方程式の一方の根が他方の根の2倍であるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef Check_Solution(a,b,c): \r\n","out":"if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\");"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列をタプルに変換する関数を書く。\n\"\"\"\ndef string_to_tuple(str1):\r\n","out":"result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"}
{"in":"from typing import List\n\"\"\"\nリスト内の負の数を数える python 関数を書きなさい。\n\"\"\"\ndef neg_count(list):\r\n","out":"neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count"}
{"in":"from typing import List\n\"\"\"\n与えられた正の整数のタプルを整数に変換する関数を書きなさい。\n\"\"\"\ndef tuple_to_int(nums):\r\n","out":"result = int(''.join(map(str,nums)))\r\n    return result"}
{"in":"from typing import List\n\"\"\"\nリストから変更されたランレングスエンコーディングを反映する関数を書く。\n\"\"\"\ndef modified_encode(alist):\r\n","out":"def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"}
{"in":"from typing import List\n\"\"\"\n放物線の直線を求める関数を書きなさい。\n\"\"\"\ndef parabola_directrix(a, b, c): \r\n","out":"directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"}
{"in":"from typing import List\n\"\"\"\n右端の未設定ビットを設定する python 関数を書きなさい。\n\"\"\"\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n","out":"return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n)"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列が母音で始まっているかどうかをチェックする関数を書く。\n\"\"\"\ndef check_str(string): \r\n","out":"if(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\")"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の固定点を求める関数を書きなさい。\n\"\"\"\ndef find_fixed_point(arr, n): \r\n","out":"for i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"}
{"in":"from typing import List\n\"\"\"\n与えられた数の二項確率を計算する関数を書きなさい。\n\"\"\"\ndef nCr(n, r): \r\n","out":"if (r > n \/ 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer \/= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k))"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の中で k 回出現する最初の要素を見つける python 関数を書きなさい。\n\"\"\"\ndef first_Element(arr,n,k): \r\n","out":"count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"}
{"in":"from typing import List\n\"\"\"\n偶数の位置で偶数の和を求める python 関数を書きなさい。\n\"\"\"\ndef sum_even_and_even_index(arr,n):  \r\n","out":"i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の最初の繰り返し文字を見つける python 関数を書きなさい。\n\"\"\"\ndef first_Repeated_Char(str): \r\n","out":"h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"}
{"in":"from typing import List\n\"\"\"\n[リンクテキスト](https:\/\/ [リンクテキスト](https:\/\/ [リンクテキスト](https:\/\/)))文字列をリストに変換する関数を書く。\n\"\"\"\ndef string_to_list(string): \r\n","out":"lst = list(string.split(\" \")) \r\n    return lst"}
{"in":"from typing import List\n\"\"\"\n与えられた偶数までの偶数の平均を求める python 関数を書きなさい。\n\"\"\"\ndef average_Even(n) : \r\n","out":"if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm \/\/ count"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列から大文字の部分文字列を取り除く関数を書きなさい。\n\"\"\"\ndef remove_uppercase(str1):\r\n","out":"remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"}
{"in":"from typing import List\n\"\"\"\nタイリング問題を解く関数を書く。\n\"\"\"\ndef get_noOfways(n):\r\n","out":"if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"}
{"in":"from typing import List\n\"\"\"\nタプル内のすべての要素が同じデータ型かどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_type(test_tuple):\r\n","out":"res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n双方向タプルのペアを数える関数を書きなさい。\n\"\"\"\ndef count_bidirectional(test_list):\r\n","out":"res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res))"}
{"in":"from typing import List\n\"\"\"\n文字列が特定の数字で始まる関数を書きなさい。\n\"\"\"\ndef match_num(string):\r\n","out":"text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}
{"in":"from typing import List\n\"\"\"\n2つのタプルのリストの類似したインデックスの最大値を求める関数を書きなさい。\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\r\n","out":"res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n判別値を計算する関数を書きなさい。\n\"\"\"\ndef discriminant_value(x,y,z):\r\n","out":"discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"}
{"in":"from typing import List\n\"\"\"\n2つのバイナリ文字列を等しくするために必要な最小スワップ数を求めるpython関数を書きなさい。\n\"\"\"\ndef min_Swaps(s1,s2) :  \r\n","out":"c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 \/\/ 2 + c1 \/\/ 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;"}
{"in":"from typing import List\n\"\"\"\nncr mod p の値を計算する関数を書きなさい。\n\"\"\"\ndef nCr_mod_p(n, r, p): \r\n","out":"if (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r]"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の文字数を数える関数を書きなさい。\n\"\"\"\ndef char_frequency(str1):\r\n","out":"dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"}
{"in":"from typing import List\n\"\"\"\n2つの数値の最大値を求める python 関数を書きなさい。\n\"\"\"\ndef maximum(a,b):   \r\n","out":"if a >= b: \r\n        return a \r\n    else: \r\n        return b"}
{"in":"from typing import List\n\"\"\"\n配列が角の要素だけを選んでソートできるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef check(arr,n): \r\n","out":"g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"}
{"in":"from typing import List\n\"\"\"\n再帰を使って2つの整数の最大公約数(gcd)を求める関数を書きなさい。\n\"\"\"\ndef recur_gcd(a, b):\r\n","out":"low = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"}
{"in":"from typing import List\n\"\"\"\nソートされ回転した配列の最大要素を求める python 関数を書きなさい。\n\"\"\"\ndef find_Max(arr,low,high): \r\n","out":"if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) \/\/ 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high)"}
{"in":"from typing import List\n\"\"\"\nリストに与えられたサブリストが含まれているかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef is_sublist(l, s):\r\n","out":"sub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの数字が同じ桁数かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef same_Length(A,B): \r\n","out":"while (A > 0 and B > 0): \r\n        A = A \/ 10; \r\n        B = B \/ 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False;"}
{"in":"from typing import List\n\"\"\"\n文字列をリストに変換する python 関数を書きなさい。\n\"\"\"\ndef Convert(string): \r\n","out":"li = list(string.split(\" \")) \r\n    return li"}
{"in":"from typing import List\n\"\"\"\n2つの数値が1つのビット位置でのみ異なるかどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef is_Power_Of_Two (x): \r\n","out":"return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"}
{"in":"from typing import List\n\"\"\"\n与えられた数の偶数パリティをチェックする python 関数を書きなさい。\n\"\"\"\ndef check_Even_Parity(x): \r\n","out":"parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルの値をクリアする関数を書きなさい。\n\"\"\"\ndef clear_tuple(test_tup):\r\n","out":"temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列集合の中で、最長の共通接頭辞を見つける関数を書きなさい。\n\"\"\"\ndef common_prefix_util(str1, str2): \r\n","out":"result = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプル・リスト内のすべてのnone値を持つタプルを削除する関数を書く。\n\"\"\"\ndef remove_tuple(test_list):\r\n","out":"res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res))"}
{"in":"from typing import List\n\"\"\"\nn+(n-2)+(n-4)... (n-x =< 0となるまで)の正の整数の和を計算する関数を書きなさい。\n\"\"\"\ndef sum_series(n):\r\n","out":"if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"}
{"in":"from typing import List\n\"\"\"\n最初の n 個の奇数の自然数の平方和を求める python 関数を書きなさい。\n\"\"\"\ndef square_Sum(n):  \r\n","out":"return int(n*(4*n*n-1)\/3)"}
{"in":"from typing import List\n\"\"\"\n極座標を直交座標に変換する関数を書く。\n\"\"\"\ndef polar_rect(x,y):\r\n","out":"cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列のブラケットバランスに必要なスワップの最小数を求める関数を書きなさい。\n\"\"\"\ndef swap_count(s):\r\n","out":"chars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"}
{"in":"from typing import List\n\"\"\"\n五角形の外周を求める関数を書きなさい。\n\"\"\"\ndef perimeter_pentagon(a):\r\n","out":"perimeter=(5*a)\r\n  return perimeter"}
{"in":"from typing import List\n\"\"\"\n辞書内のすべての値が同じかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_value(dict, n):\r\n","out":"result = all(x == n for x in dict.values()) \r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた数の下一桁を求める python 関数を書きなさい。\n\"\"\"\ndef last_Digit(n) :\r\n","out":"return (n % 10)"}
{"in":"from typing import List\n\"\"\"\n与えられた数が共素数かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef gcd(p,q):\r\n","out":"while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"}
{"in":"from typing import List\n\"\"\"\n2つの配列の差分絶対値の最小和を求める python 関数を書きなさい。\n\"\"\"\ndef find_Min_Sum(a,b,n): \r\n","out":"a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\nある操作を p 回実行した後、与えられた配列の最後の要素が偶数か奇数かをチェックする python 関数を書きなさい。\n\"\"\"\ndef check_last (arr,n,p): \r\n","out":"_sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\""}
{"in":"from typing import List\n\"\"\"\n与えられた数のリストの中で、連続する重複要素の頻度を数える関数を書きなさい。\n\"\"\"\ndef count_duplic(lists):\r\n","out":"element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency"}
{"in":"from typing import List\n\"\"\"\n1から指定された数までのすべての和を求める関数を書きなさい。\n\"\"\"\ndef amicable_numbers_sum(limit):\r\n","out":"if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"}
{"in":"from typing import List\n\"\"\"\n複数の整数のリストを1つの整数に変換するpython関数を書きなさい。\n\"\"\"\ndef convert(list): \r\n","out":"s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res)"}
{"in":"from typing import List\n\"\"\"\n約数の和が同じかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef divSum(n): \r\n","out":"sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n \/ i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2);"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルのk番目のインデックスの積を求める関数を書きなさい。\n\"\"\"\ndef get_product(val) : \r\n","out":"res = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた文章の中で最もよく使われる n 個の単語の出現回数を求める関数を書きなさい。\n\"\"\"\ndef n_common_words(text,n):\r\n","out":"words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"}
{"in":"from typing import List\n\"\"\"\n要素を反復処理する関数を書き、各要素をその回数だけ繰り返す。\n\"\"\"\ndef count_variable(a,b,c,d):\r\n","out":"c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"}
{"in":"from typing import List\n\"\"\"\n偶数単語の最初の最大長を求める python 関数を書きなさい。\n\"\"\"\ndef find_Max_Len_Even(str): \r\n","out":"n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen]"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの中で最大の頻度を持つ項目を見つける関数を書きなさい。\n\"\"\"\ndef max_occurrences(nums):\r\n","out":"dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"}
{"in":"from typing import List\n\"\"\"\n単語の長さが奇数かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef word_len(s): \r\n","out":"s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルがk個の要素しか含まないかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_tuples(test_tuple, K):\r\n","out":"res = all(ele in K for ele in test_tuple)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列について，隣接する要素間の差を持つ部分配列の最大長を求める関数を書きなさい．\n\"\"\"\ndef max_len_sub( arr, n): \r\n","out":"mls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って文字列から最大数値を抽出する関数を書きなさい。\n\"\"\"\ndef extract_max(input): \r\n","out":"numbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"}
{"in":"from typing import List\n\"\"\"\n半径 r の円の中にある長方形の数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Rectangles(radius):  \r\n","out":"rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文中のすべての副詞とその位置を見つける関数を書きなさい。\n\"\"\"\ndef find_adverbs(text):\r\n","out":"for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルが明瞭かどうかをチェックする関数を書く。\n\"\"\"\ndef check_distinct(test_tup):\r\n","out":"res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた入れ子リスト構造を平坦化する関数を書く。\n\"\"\"\ndef flatten_list(list1):\r\n","out":"result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list"}
{"in":"from typing import List\n\"\"\"\n2つの数の商を求める python 関数を書きなさい。\n\"\"\"\ndef find(n,m):  \r\n","out":"q = n\/\/m \r\n    return (q)"}
{"in":"from typing import List\n\"\"\"\nグレゴリオ暦の日付を検証する関数を書きなさい。\n\"\"\"\ndef check_date(m, d, y):\r\n","out":"try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"}
{"in":"from typing import List\n\"\"\"\n最も長い単語の長さを求める python 関数を書きなさい。\n\"\"\"\ndef len_log(list1):\r\n","out":"max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"}
{"in":"from typing import List\n\"\"\"\n与えられた数のリストから最も小さい3つの正の数の和を求める python 関数を書きなさい。\n\"\"\"\ndef sum_three_smallest_nums(lst):\r\n","out":"return sum(sorted([x for x in lst if x > 0])[:3])"}
{"in":"from typing import List\n\"\"\"\nあるタプルの内容を他のタプルの対応するインデックスで減算する関数を書きなさい。\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\r\n","out":"res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルを浮動小数点数に変換する関数を書きなさい。\n\"\"\"\ndef tuple_to_float(test_tup):\r\n","out":"res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nひし形の面積を求める関数を書きなさい。\n\"\"\"\ndef rombus_area(p,q):\r\n","out":"area=(p*q)\/2\r\n  return area"}
{"in":"from typing import List\n\"\"\"\nソートされた配列の中で一度だけ現れる要素を見つける python 関数を書きなさい。\n\"\"\"\ndef search(arr,n) :\r\n","out":"XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"}
{"in":"from typing import List\n\"\"\"\n連続する3つの要素が存在しない最大和を求める関数を書きなさい。\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n): \r\n","out":"sum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"}
{"in":"from typing import List\n\"\"\"\nタプルの交互連鎖の和を抽出する関数を書きなさい。\n\"\"\"\ndef sum_of_alternates(test_tuple):\r\n","out":"sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2))"}
{"in":"from typing import List\n\"\"\"\n文字列の長さを最小化する python 関数を書きなさい。\n\"\"\"\ndef minimum_Length(s) : \r\n","out":"maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc"}
{"in":"from typing import List\n\"\"\"\nリスト内の正の数を数える python 関数を書きなさい。\n\"\"\"\ndef pos_count(list):\r\n","out":"pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルを、隣接する要素を使ってキー値辞書に変換する関数を書きなさい。\n\"\"\"\ndef tuple_to_dict(test_tup):\r\n","out":"res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n最大長を持つサブリストを見つけるpython関数を書きなさい。\n\"\"\"\ndef Find_Max(lst): \r\n","out":"maxList = max((x) for x in lst) \r\n    return maxList"}
{"in":"from typing import List\n\"\"\"\n文字列の総文字数を数える関数を書きなさい。\n\"\"\"\ndef count_charac(str1):\r\n","out":"total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの最初の偶数と奇数の和を求める関数を書きなさい。\n\"\"\"\ndef sum_even_odd(list1):\r\n","out":"first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"}
{"in":"from typing import List\n\"\"\"\nln,mロブ数を求める関数を書きなさい。\n\"\"\"\ndef binomial_coeff(n, k): \r\n","out":"C = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t\/ (m + n + 1))"}
{"in":"from typing import List\n\"\"\"\n複素数を極座標に変換するpython関数を書きなさい。\n\"\"\"\ndef convert(numbers):    \r\n","out":"num = cmath.polar(numbers)  \r\n  return (num)"}
{"in":"from typing import List\n\"\"\"\n3つの辞書を1つの式にマージする関数を書いてください。\n\"\"\"\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n","out":"merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"}
{"in":"from typing import List\n\"\"\"\n数値の偶数位と奇数位の桁数の積が等しいかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef product_Equal(n): \r\n","out":"if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n\/\/10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n\/\/10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのタプルを最大化する関数を書け。\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\r\n","out":"res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\na'のb'乗を計算する関数を書きなさい。\n\"\"\"\ndef power(a,b):\r\n","out":"if b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"}
{"in":"from typing import List\n\"\"\"\n大文字と小文字の並びを求める関数を書きなさい。\n\"\"\"\ndef text_uppercase_lowercase(text):\r\n","out":"patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n最小の長さを持つリストのリストを見つける関数を書きなさい。\n\"\"\"\ndef min_length(list1):\r\n","out":"min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の末尾にすべてのゼロを移動する関数を書きなさい。\n\"\"\"\ndef re_order(A):\r\n","out":"k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"}
{"in":"from typing import List\n\"\"\"\n与えられた数値のビットを左回転する python 関数を書きなさい。\n\"\"\"\ndef left_Rotate(n,d):   \r\n","out":"return (n << d)|(n >> (INT_BITS - d))"}
{"in":"from typing import List\n\"\"\"\n三角柱の体積を求める python 関数を書きなさい。\n\"\"\"\ndef find_Volume(l,b,h) : \r\n","out":"return ((l * b * h) \/ 2)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列から最後に取り除かれた要素の位置を求める python 関数を書きなさい。\n\"\"\"\ndef get_Position(a,n,m): \r\n","out":"for i in range(n): \r\n        a[i] = (a[i] \/\/ m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の中から'a'または'e'で始まる単語をすべて見つける関数を書きなさい。\n\"\"\"\ndef words_ae(text):\r\n","out":"list = re.findall(\"[ae]\\w+\", text)\r\n return list"}
{"in":"from typing import List\n\"\"\"\n長さkのタプルをすべて削除する関数を書きなさい。\n\"\"\"\ndef remove_tuples(test_list, K):\r\n","out":"res = [ele for ele in test_list if len(ele) != K]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n接頭辞から i 番目のインデックスまで、また i 番目の後にある与えられた k 番目の要素を含む、増加する部分列の最大和を求める関数を書きなさい。\n\"\"\"\ndef max_sum_increasing_subseq(a, n, index, k):\r\n","out":"dp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"}
{"in":"from typing import List\n\"\"\"\nn-1の幾何和を計算する関数を書きなさい。\n\"\"\"\ndef geometric_sum(n):\r\n","out":"if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 \/ (pow(2, n)) + geometric_sum(n - 1)"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、キャメルケース文字列をスネークケース文字列に変換する関数を書きなさい。\n\"\"\"\ndef camel_to_snake(text):\r\n","out":"str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}
{"in":"from typing import List\n\"\"\"\nヒープキューアルゴリズムを使用して、ソートされた整数のリストから最も頻繁に出現する上位k個の整数を見つける関数を書きなさい。\n\"\"\"\ndef func(nums, k):\r\n","out":"import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"}
{"in":"from typing import List\n\"\"\"\nタプル文字列を整数タプルに変換する関数を書く。\n\"\"\"\ndef tuple_str_int(test_str):\r\n","out":"res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n完全数の平方根を求める関数を書きなさい。\n\"\"\"\ndef sqrt_root(num):\r\n","out":"sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root"}
{"in":"from typing import List\n\"\"\"\nn番目の中心六角数を求める関数を書きなさい。\n\"\"\"\ndef centered_hexagonal_number(n):\r\n","out":"return 3 * n * (n - 1) + 1"}
{"in":"from typing import List\n\"\"\"\n特定の要素を含むサブリストの数を数える関数を書きなさい。\n\"\"\"\ndef count_element_in_list(list1, x): \r\n","out":"ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"}
{"in":"from typing import List\n\"\"\"\n2つのリストの差を求めるpython関数を書きなさい。\n\"\"\"\ndef Diff(li1,li2):\r\n","out":"return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))"}
{"in":"from typing import List\n\"\"\"\n与えられた配列中の最大値と最小値の差を求める python 関数を書きなさい。\n\"\"\"\ndef big_diff(nums):\r\n","out":"diff= max(nums)-min(nums)\r\n     return diff"}
{"in":"from typing import List\n\"\"\"\n与えられた整数の配列に重複する要素があるかどうかを調べる関数を書きなさい。\n\"\"\"\ndef test_duplicate(arraynums):\r\n","out":"nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)"}
{"in":"from typing import List\n\"\"\"\nサブリストの2番目の要素に従ってリストをソートするpython関数を書きなさい。\n\"\"\"\ndef Sort(sub_li): \r\n","out":"sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li"}
{"in":"from typing import List\n\"\"\"\n辞書キーの要素にインデックスでアクセスする関数を書きなさい。\n\"\"\"\ndef access_key(ditionary,key):\r\n","out":"return list(ditionary)[key]"}
{"in":"from typing import List\n\"\"\"\n与えられた座標タプルの隣接する座標をすべて抽出する関数を書きなさい。\n\"\"\"\ndef adjac(ele, sub = []): \r\n","out":"if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、与えられた文字列リストの中から文字列のアナグラムをすべて見つける関数を書きなさい。\n\"\"\"\ndef anagram_lambda(texts,str):\r\n","out":"result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列リストから重複する単語を削除する関数を書きなさい。\n\"\"\"\ndef remove_duplic_list(l):\r\n","out":"temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"}
{"in":"from typing import List\n\"\"\"\nヒープキューアルゴリズムを使って、与えられた数のリストから最小の整数を求める関数を書きなさい。\n\"\"\"\ndef heap_queue_smallest(nums,n):\r\n","out":"smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"}
{"in":"from typing import List\n\"\"\"\n2つの辞書をマージする関数を書いてください。\n\"\"\"\ndef merge_dict(d1,d2):\r\n","out":"d = d1.copy()\r\n d.update(d2)\r\n return d"}
{"in":"from typing import List\n\"\"\"\n与えられたリスト内の連続する項目のすべての組を反復処理する関数を書きなさい。\n\"\"\"\ndef pair_wise(l1):\r\n","out":"temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルをn回繰り返す関数を書きなさい。\n\"\"\"\ndef repeat_tuples(test_tup, N):\r\n","out":"res = ((test_tup, ) * N)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n円柱の頂部または底部の表面積を求める関数を書きなさい。\n\"\"\"\ndef topbottom_surfacearea(r):\r\n","out":"toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"}
{"in":"from typing import List\n\"\"\"\n文字列中の文字の出現回数を数える関数を書きなさい。\n\"\"\"\ndef count_char(string,char):\r\n","out":"count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"}
{"in":"from typing import List\n\"\"\"\n正四面体の面積を計算する関数を書きなさい。\n\"\"\"\ndef area_tetrahedron(side):\r\n","out":"area = math.sqrt(3)*(side*side)\r\n  return area"}
{"in":"from typing import List\n\"\"\"\n2つのタプルのリストが同一かどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_identical(test_list1, test_list2):\r\n","out":"res = test_list1 == test_list2\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた数のすべての奇数ビットをトグルする python 関数を書きなさい。\n\"\"\"\ndef even_bit_toggle_number(n) : \r\n","out":"res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res"}
{"in":"from typing import List\n\"\"\"\n各サブリストの最後の要素を取得するpython関数を書きなさい。\n\"\"\"\ndef Extract(lst): \r\n","out":"return [item[-1] for item in lst]"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのタプルから一致するタプルを取り除く関数を書きなさい。\n\"\"\"\ndef remove_matching_tuple(test_list1, test_list2):\r\n","out":"res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n配列の和が偶数になるように最小の数を加える python 関数を書きなさい。\n\"\"\"\ndef min_Num(arr,n):  \r\n","out":"odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのタプルを入れ子のタプルに連結する関数を書きなさい。\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\r\n","out":"res = test_tup1 + test_tup2\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、リスト内の個々の要素の立方体を求める関数を書く。\n\"\"\"\ndef cube_nums(nums):\r\n","out":"cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"}
{"in":"from typing import List\n\"\"\"\n2つの数を等しくするのに必要な最小演算を求める python 関数を書きなさい。\n\"\"\"\ndef min_Operations(A,B):  \r\n","out":"if (A > B): \r\n        swap(A,B)  \r\n    B = B \/\/ math.gcd(A,B);  \r\n    return B - 1"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の中で最初に繰り返される単語を見つける python 関数を書きなさい。\n\"\"\"\ndef first_repeated_word(str1):\r\n","out":"temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの配列が等しいかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\r\n","out":"if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの中の連続する2つの数値の差を求める関数を書きなさい。\n\"\"\"\ndef diff_consecutivenums(nums):\r\n","out":"result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた数が豊富かどうかを調べる関数を書きなさい。\n\"\"\"\ndef get_sum(n): \r\n","out":"sum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n\/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n \/ i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"}
{"in":"from typing import List\n\"\"\"\npythonで*演算子を使わずに2つの整数を乗算する関数を書きなさい。\n\"\"\"\ndef multiply_int(x, y):\r\n","out":"if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"}
{"in":"from typing import List\n\"\"\"\nyyyy-mm-dd形式の日付をdd-mm-yyyy形式に変換する関数を書きなさい。\n\"\"\"\ndef change_date_format(dt):\r\n","out":"return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"}
{"in":"from typing import List\n\"\"\"\n基数ソートを使って要素のリストをソートする関数を書きなさい。\n\"\"\"\ndef radix_sort(nums):\r\n","out":"RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i \/ placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"}
{"in":"from typing import List\n\"\"\"\nすべての要素を等しくするのに必要な k 回の演算を求める python 関数を書きなさい。\n\"\"\"\ndef min_Ops(arr,n,k): \r\n","out":"max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) \/ k \r\n    return int(res)"}
{"in":"from typing import List\n\"\"\"\nサブリストの最大長を求める python 関数を書きなさい。\n\"\"\"\ndef Find_Max_Length(lst):  \r\n","out":"maxLength = max(len(x) for x in lst )\r\n    return maxLength"}
