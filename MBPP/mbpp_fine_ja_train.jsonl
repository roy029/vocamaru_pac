{"in":"from typing import List\n\"\"\"\n与えられた 3 x n の盤面に対して、2 x 1 のドミノで埋める方法の数を求める関数を書け。\n\"\"\"\ndef count_ways(n): \r\n","out":"A = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n]"}
{"in":"from typing import List\n\"\"\"\nタプルのリストから空のタプルを取り除く関数を書きなさい。\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n","out":"#L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの一意な数の積を計算する python 関数を書きなさい。\n\"\"\"\ndef unique_product(list_data):\r\n","out":"temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"}
{"in":"from typing import List\n\"\"\"\n最初の n 個の偶数の自然数の 4 乗の和を求める python 関数を書きなさい。\n\"\"\"\ndef even_Power_Sum(n): \r\n","out":"sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum;"}
{"in":"from typing import List\n\"\"\"\nすべてのゼロを与えられたリストの最後に移動する python 関数を書きなさい。\n\"\"\"\ndef move_zero(num_list):\r\n","out":"a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"}
{"in":"from typing import List\n\"\"\"\n各サブリストの最初の要素を取得するpython関数を書きなさい。\n\"\"\"\ndef Extract(lst): \r\n","out":"return [item[0] for item in lst]"}
{"in":"from typing import List\n\"\"\"\nソートされた配列の要素の最後の位置を求める python 関数を書きなさい。\n\"\"\"\ndef last(arr,x,n):\r\n","out":"low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) \/\/ 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"}
{"in":"from typing import List\n\"\"\"\n文字列の末尾に数字があるかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef end_num(string):\r\n","out":"text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストの各タプルをk個ずつ切り詰める関数を書きなさい。\n\"\"\"\ndef trim_tuple(test_list, K):\r\n","out":"res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res))"}
{"in":"from typing import List\n\"\"\"\n最初に足りない正の数を求める python 関数を書きなさい。\n\"\"\"\ndef first_Missing_Positive(arr,n): \r\n","out":"ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"}
{"in":"from typing import List\n\"\"\"\nソートされた配列の要素の最初の位置を求める python 関数を書きなさい。\n\"\"\"\ndef first(arr,x,n): \r\n","out":"low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) \/\/ 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"}
{"in":"from typing import List\n\"\"\"\n2つの整数間の桁間距離を求めるpython関数を書きなさい。\n\"\"\"\ndef digit_distance_nums(n1, n2):\r\n","out":"return sum(map(int,str(abs(n1-n2))))"}
{"in":"from typing import List\n\"\"\"\n与えられたタプル記録の初期データと最終データにアクセスする関数を書きなさい。\n\"\"\"\ndef front_and_rear(test_tup):\r\n","out":"res = (test_tup[0], test_tup[-1])\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n偶数桁と奇数桁の和の差を求める python 関数を書きなさい。\n\"\"\"\ndef is_Diff(n): \r\n","out":"return (n % 11 == 0)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列からスペースを取り除く python 関数を書きなさい。\n\"\"\"\ndef remove_spaces(str1):\r\n","out":"str1 = str1.replace(' ','')\r\n  return str1"}
{"in":"from typing import List\n\"\"\"\n最初の n 個の偶数の自然数の 3 乗和を求める python 関数を書きなさい。\n\"\"\"\ndef cube_Sum(n): \r\n","out":"sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\n与えられた数がキース数かどうかを調べる関数を書きなさい。\n\"\"\"\ndef is_num_keith(x): \r\n","out":"terms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp \/ 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x)"}
{"in":"from typing import List\n\"\"\"\n与えられた数が2乗の和で表せるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef sum_Square(n) : \r\n","out":"i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"}
{"in":"from typing import List\n\"\"\"\nl と r の範囲内のすべての偶数の自然数の和を求める python 関数を書きなさい。\n\"\"\"\ndef sum_Natural(n): \r\n","out":"sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r \/ 2)) - sum_Natural(int((l - 1) \/ 2)))"}
{"in":"from typing import List\n\"\"\"\nn番目のスマートナンバーを求める関数を書きなさい。\n\"\"\"\ndef smartNumber(n): \r\n","out":"primes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1]"}
{"in":"from typing import List\n\"\"\"\n与えられた配列のすべてのペアの差の絶対値の和を求める python 関数を書きなさい。\n\"\"\"\ndef sum_Pairs(arr,n): \r\n","out":"sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\nn番目の要素ごとにリストを分割する関数を書きなさい。\n\"\"\"\ndef list_split(S, step):\r\n","out":"return [S[i::step] for i in range(step)]"}
{"in":"from typing import List\n\"\"\"\n整数の配列中のゼロの比率を求める関数を書きなさい。\n\"\"\"\ndef zero_count(nums):\r\n","out":"n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1\/n,2)"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列中のスペース、コンマ、ドットをすべてコロンに置き換える関数を書きなさい。\n\"\"\"\ndef fill_spaces(text):\r\n","out":"return (re.sub(\"[ ,.]\", \":\", text))"}
{"in":"from typing import List\n\"\"\"\nn以下の明晰な数を得る関数を書きなさい。\n\"\"\"\ndef get_ludic(n):\r\n","out":"ludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"}
{"in":"from typing import List\n\"\"\"\namax-amin<=kとなるように削除すべき要素の最小数を求める関数を書きなさい。\n\"\"\"\ndef find_ind(key, i, n, \r\n","out":"ind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) \/ 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"}
{"in":"from typing import List\n\"\"\"\n単語の長さが偶数かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef word_len(s): \r\n","out":"s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"}
{"in":"from typing import List\n\"\"\"\nリストの要素の頻度を得る関数を書きなさい。\n\"\"\"\ndef freq_count(list1):\r\n","out":"freq_count= collections.Counter(list1)\r\n  return freq_count"}
{"in":"from typing import List\n\"\"\"\nビット演算子を使って、与えられた数が奇数かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef is_odd(n) : \r\n","out":"if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False;"}
{"in":"from typing import List\n\"\"\"\n2番目のタプルの各要素が、1番目のタプルの対応するインデックスより小さいかどうかをチェックする関数を書く。\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\r\n","out":"res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた月名が31日を含むかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_monthnumb(monthname2):\r\n","out":"if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n度数をラジアンに変換する関数を書きなさい。\n\"\"\"\ndef radian_degree(degree):\r\n","out":"radian = degree*(math.pi\/180)\r\n return radian"}
{"in":"from typing import List\n\"\"\"\nn 個の自然数の 5 乗の和を求める python 関数を書きなさい。\n\"\"\"\ndef fifth_Power_Sum(n) : \r\n","out":"sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列のすべての文字が一意かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef unique_Characters(str):\r\n","out":"for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の中で最大の回文数を求める関数を書きなさい。\n\"\"\"\ndef is_palindrome(n) : \r\n","out":"divisor = 1\r\n\twhile (n \/ divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n \/\/ divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) \/\/ 10\r\n\t\tdivisor = divisor \/\/ 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、リスト内の各要素の2乗を求める関数を書きなさい。\n\"\"\"\ndef square_nums(nums):\r\n","out":"square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列を複数の区切り文字で分割する関数を書きなさい。\n\"\"\"\ndef multiple_split(text):\r\n","out":"return (re.split('; |, |\\*|\\n',text))"}
{"in":"from typing import List\n\"\"\"\n与えられた辞書の項目を、タプルのキーを持つキーのタプル積でソートする関数を書きなさい。\n\"\"\"\ndef sort_dict_item(test_dict):\r\n","out":"res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の奇数インデックス値を持つ文字を削除する python 関数を書きなさい。\n\"\"\"\ndef odd_values_string(str):\r\n","out":"result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"}
{"in":"from typing import List\n\"\"\"\n要素の和が最も大きいリストをリストの中から見つける関数を書きなさい。\n\"\"\"\ndef max_sum_list(lists):\r\n","out":"return max(lists, key=sum)"}
{"in":"from typing import List\n\"\"\"\n与えられた数の階乗の桁数を数える python 関数を書きなさい。\n\"\"\"\ndef find_Digits(n): \r\n","out":"if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n \/ math.e) + math.log10(2 * math.pi * n) \/2.0)); \r\n    return math.floor(x) + 1;"}
{"in":"from typing import List\n\"\"\"\n2つの数値を入れ替える関数を書きなさい。\n\"\"\"\ndef swap_numbers(a,b):\r\n","out":"temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"}
{"in":"from typing import List\n\"\"\"\n与えられた整数の配列と数kについて、不一致の組の最大和を求める関数を書きなさい。\n\"\"\"\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \r\n","out":"arr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"}
{"in":"from typing import List\n\"\"\"\n文字列値のタプルを整数値のタプルに変換する関数を書きなさい。\n\"\"\"\ndef tuple_int_str(tuple_str):\r\n","out":"result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n級数1²+2²+3²+...+n²の和を計算する関数を書け。\n\"\"\"\ndef series_sum(number):\r\n","out":"total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) \/ 6\r\n return total"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列から大文字の後に小文字が続くシーケンスを見つける関数を書きなさい。\n\"\"\"\ndef match(text): \r\n","out":"pattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No')"}
{"in":"from typing import List\n\"\"\"\n半円に内接する最大の三角形を求めるpython関数を書きなさい。\n\"\"\"\ndef triangle_area(r) :  \r\n","out":"if r < 0 : \r\n        return -1\r\n    return r * r"}
{"in":"from typing import List\n\"\"\"\n1からnまでの素数の和を求めるpython関数を書きなさい。\n\"\"\"\ndef sum_Of_Primes(n): \r\n","out":"prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストからn番目の列の最大値を求める関数を書きなさい。\n\"\"\"\ndef max_of_nth(test_list, N):\r\n","out":"res = max([sub[N] for sub in test_list])\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nタプルレコードのリストからリアエレメントを抽出する関数を書きなさい。\n\"\"\"\ndef rear_extract(test_list):\r\n","out":"res = [lis[-1] for lis in test_list]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nn番目の8角形数を求める関数を書きなさい。\n\"\"\"\ndef is_octagonal(n): \r\n","out":"return 3 * n * n - 2 * n"}
{"in":"from typing import List\n\"\"\"\n台形の中央値を求める関数を書きなさい。\n\"\"\"\ndef median_trapezium(base1,base2,height):\r\n","out":"median = 0.5 * (base1+ base2)\r\n return median"}
{"in":"from typing import List\n\"\"\"\n整数をローマ数字に変換する関数を書きなさい。\n\"\"\"\ndef int_to_roman( num):\r\n","out":"val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num \/\/ val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"}
{"in":"from typing import List\n\"\"\"\n複数の整数のリストを1つの整数に変換する関数を書きなさい。\n\"\"\"\ndef multiple_to_single(L):\r\n","out":"x = int(\"\".join(map(str, L)))\r\n  return x"}
{"in":"from typing import List\n\"\"\"\nxor が偶数であるペアを数える python 関数を書きなさい。\n\"\"\"\ndef find_even_Pair(A,N): \r\n","out":"evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair;"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの真偽値を数える python 関数を書きなさい。\n\"\"\"\ndef count(lst):   \r\n","out":"return sum(lst)"}
{"in":"from typing import List\n\"\"\"\n台形の面積を求める関数を書きなさい。\n\"\"\"\ndef area_trapezium(base1,base2,height):\r\n","out":"area = 0.5 * (base1 + base2) * height\r\n return area"}
{"in":"from typing import List\n\"\"\"\naの後に0個以上のbが続く文字列にマッチする関数を書きなさい。\n\"\"\"\ndef text_match(text):\r\n","out":"patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"in":"from typing import List\n\"\"\"\nheapqモジュールを使って、与えられた2つのソートされたリストを結合する関数を書きなさい。\n\"\"\"\ndef combine_lists(num1,num2):\r\n","out":"combine_lists=list(merge(num1, num2))\r\n  return combine_lists"}
{"in":"from typing import List\n\"\"\"\n文字列中のいくつかのリテラル文字列を検索する関数を書きなさい。\n\"\"\"\ndef string_literals(patterns,text):\r\n","out":"for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"}
{"in":"from typing import List\n\"\"\"\n約数の逆数の和を求める python 関数を書きなさい。\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum): \r\n","out":"ans = float(Sum)*1.0 \/float(N);  \r\n    return round(ans,2);"}
{"in":"from typing import List\n\"\"\"\nリストのすべての項目を乗算する python 関数を書きなさい。\n\"\"\"\ndef multiply_list(items):\r\n","out":"tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列中の最大出現文字を求める python 関数を書きなさい。\n\"\"\"\ndef get_max_occuring_char(str1):\r\n","out":"ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"}
{"in":"from typing import List\n\"\"\"\nl と r の範囲内のすべての奇数の自然数の和を求める python 関数を書きなさい。\n\"\"\"\ndef sum_Odd(n): \r\n","out":"terms = (n + 1)\/\/2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"}
{"in":"from typing import List\n\"\"\"\nソートされ回転した配列の最小要素を求める python 関数を書きなさい。\n\"\"\"\ndef find_Min(arr,low,high): \r\n","out":"while (low < high): \r\n        mid = low + (high - low) \/\/ 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high];"}
{"in":"from typing import List\n\"\"\"\nmapとラムダ関数を使って2つのリストを掛け合わせる関数を書く。\n\"\"\"\ndef mul_list(nums1,nums2):\r\n","out":"result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"}
{"in":"from typing import List\n\"\"\"\n異なる要素を持つ部分集合の最小数を求める python 関数を書きなさい。\n\"\"\"\ndef subset(ar, n): \r\n","out":"res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res"}
{"in":"from typing import List\n\"\"\"\n最大 n 個のスペース、コンマ、ドットをコロンに置き換える関数を書きなさい。\n\"\"\"\ndef replace_max_specialchar(text,n):\r\n","out":"return (re.sub(\"[ ,.]\", \":\", text, n))"}
{"in":"from typing import List\n\"\"\"\nリストの最後の要素を別のリストに置き換える関数を書きなさい。\n\"\"\"\ndef replace_list(list1,list2):\r\n","out":"list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list"}
{"in":"from typing import List\n\"\"\"\n二次方程式の根が数値的には等しいが符号が反対かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef Check_Solution(a,b,c):  \r\n","out":"if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの各数の桁数の和を計算する関数を書きなさい。\n\"\"\"\ndef sum_of_digits(nums):\r\n","out":"return sum(int(el) for n in nums for el in str(n) if el.isdigit())"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列中の'road'を'rd.'と略す関数を書きなさい。\n\"\"\"\ndef road_rd(street):\r\n","out":"return (re.sub('Road$', 'Rd.', street))"}
{"in":"from typing import List\n\"\"\"\n指定されたリストがソートされているかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef issort_list(list1):\r\n","out":"result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"}
{"in":"from typing import List\n\"\"\"\nビット演算子を使って、与えられた数が偶数かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef is_Even(n) : \r\n","out":"if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False;"}
{"in":"from typing import List\n\"\"\"\n与えられた数字でできる最大の数を求める python 関数を書きなさい。\n\"\"\"\ndef find_Max_Num(arr,n) : \r\n","out":"arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列中のアルファベット、数字、特殊文字を数える関数を書きなさい。\n\"\"\"\ndef count_alpha_dig_spl(string):\r\n","out":"alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルの要素のペアごとの加算を求める関数を書きなさい。\n\"\"\"\ndef add_pairwise(test_tup):\r\n","out":"res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nn番目のルーカス数を求める関数を書きなさい。\n\"\"\"\ndef find_lucas(n): \r\n","out":"if (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2)"}
{"in":"from typing import List\n\"\"\"\nタプルリストを文字列に平坦化する関数を書く。\n\"\"\"\ndef flatten_tuple(test_list):\r\n","out":"res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n2次元配列を生成する関数を書く。\n\"\"\"\ndef multi_list(rownum,colnum):\r\n","out":"multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list"}
{"in":"from typing import List\n\"\"\"\n正方形の周囲長を求める関数を書きなさい。\n\"\"\"\ndef square_perimeter(a):\r\n","out":"perimeter=4*a\r\n  return perimeter"}
{"in":"from typing import List\n\"\"\"\nリスト内のすべての辞書が空かどうかをチェックする関数を書いてください。\n\"\"\"\ndef empty_dit(list1):\r\n","out":"empty_dit=all(not d for d in list1)\r\n return empty_dit"}
{"in":"from typing import List\n\"\"\"\n長方形の中の正方形の数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Squares(m,n):\r\n","out":"if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) \/ 6 + (n - m) * m * (m + 1) \/ 2))"}
{"in":"from typing import List\n\"\"\"\n与えられた文にその単語があるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef is_Word_Present(sentence,word): \r\n","out":"s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルを集合に変換する関数を書きなさい。\n\"\"\"\ndef tuple_to_set(t):\r\n","out":"s = set(t)\r\n  return (s)"}
{"in":"from typing import List\n\"\"\"\nn 番目のベル数を求める python 関数を書きなさい。\n\"\"\"\ndef bell_Number(n): \r\n","out":"bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0]"}
{"in":"from typing import List\n\"\"\"\naの後に0個または1個の'b'が続く文字列にマッチする関数を書きなさい。\n\"\"\"\ndef text_match_zero_one(text):\r\n","out":"patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n正多角形の面積を計算する関数を書きなさい。\n\"\"\"\ndef area_polygon(s,l):\r\n","out":"area = s * (l ** 2) \/ (4 * tan(pi \/ s))\r\n  return area"}
{"in":"from typing import List\n\"\"\"\n与えられた数のすべての奇数ビットを設定する python 関数を書きなさい。\n\"\"\"\ndef odd_bit_set_number(n):\r\n","out":"count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"}
{"in":"from typing import List\n\"\"\"\n与えられた数が無限数列に含まれるかどうかを調べる python 関数を書きなさい。\n\"\"\"\ndef does_Contain_B(a,b,c): \r\n","out":"if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n文字列中の文字を置換する関数を書きなさい。\n\"\"\"\ndef replace_char(str1,ch,newch):\r\n","out":"str2 = str1.replace(ch, newch)\r\n return str2"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の最初の非繰り返し文字を見つける python 関数を書きなさい。\n\"\"\"\ndef first_non_repeating_character(str1):\r\n","out":"char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"}
{"in":"from typing import List\n\"\"\"\n与えられた数が2つの正方形の積で表せるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef prod_Square(n):\r\n","out":"for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルがすべて同じ長さかどうかを調べる関数を書きなさい。\n\"\"\"\ndef find_equal_tuple(Input, k):\r\n","out":"flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"}
{"in":"from typing import List\n\"\"\"\n整数の配列に含まれる負の数の比を求める関数を書きなさい。\n\"\"\"\ndef negative_count(nums):\r\n","out":"n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1\/n,2)"}
{"in":"from typing import List\n\"\"\"\n文字列中に最後に出現した文字を見つける関数を書きなさい。\n\"\"\"\ndef last_occurence_char(string,char):\r\n","out":"flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の各単語の最初と最後の文字を大文字にする python 関数を書きなさい。\n\"\"\"\ndef capitalize_first_last_letters(str1):\r\n","out":"str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]"}
{"in":"from typing import List\n\"\"\"\nタプル中の要素の出現回数を数えるpython関数を書きなさい。\n\"\"\"\ndef count_X(tup, x): \r\n","out":"count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n各要素に、与えられたタプル内の他の類似したペアからそのペア要素を代入する関数を書く。\n\"\"\"\ndef assign_elements(test_list):\r\n","out":"res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列から不等要素のペアを数える python 関数を書きなさい。\n\"\"\"\ndef count_Pairs(arr,n): \r\n","out":"cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt;"}
{"in":"from typing import List\n\"\"\"\n再帰リスト和の関数を書く。\n\"\"\"\ndef recursive_list_sum(data_list):\r\n","out":"total = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"}
{"in":"from typing import List\n\"\"\"\n桁数の合計が長さに等しい部分文字列の数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Substrings(s,n):\r\n","out":"count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の中で、2番目に多く繰り返される（頻度の高い）文字列を求める関数を書きなさい。\n\"\"\"\ndef second_frequent(input): \r\n","out":"dict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルからインデックスの最小値レコードを抽出する関数を書きなさい。\n\"\"\"\ndef index_minimum(test_list):\r\n","out":"res = min(test_list, key = itemgetter(1))[0]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n長方形の中の正方形の数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Squares(m,n): \r\n","out":"if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) \/\/ 6"}
{"in":"from typing import List\n\"\"\"\n文字列の長さを求める関数を書きなさい。\n\"\"\"\ndef string_length(str1):\r\n","out":"count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n数列が増加傾向にあるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef increasing_trend(nums):\r\n","out":"if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}
{"in":"from typing import List\n\"\"\"\n与えられた数値の文字列のリストを数値順にソートする関数を書きなさい。\n\"\"\"\ndef sort_numeric_strings(nums_str):\r\n","out":"result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n1からnまでの未設定ビットの合計を数えるpython関数を書きなさい。\n\"\"\"\ndef count_Unset_Bits(n) :  \r\n","out":"cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp \/\/ 2;  \r\n    return cnt;"}
{"in":"from typing import List\n\"\"\"\n最初のn個のラッキーナンバーを表示する関数を書きなさい。\n\"\"\"\ndef lucky_num(n):\r\n","out":"List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"}
{"in":"from typing import List\n\"\"\"\n与えられたヒープから最小の要素を削除し、新しい要素を挿入する関数を書きなさい。\n\"\"\"\ndef heap_replace(heap,a):\r\n","out":"hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列から空白をすべて取り除く関数を書く。\n\"\"\"\ndef remove_whitespaces(text1):\r\n","out":"return (re.sub(r'\\s+', '',text1))"}
{"in":"from typing import List\n\"\"\"\n与えられた方程式f(n) = max( (f(n\/2) + f(n\/3) + f(n\/4) + f(n\/5)), n)を使って、可能な最大和を求める関数を書け。\n\"\"\"\ndef get_max_sum (n):\r\n","out":"res = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i \/ 2)] \r\n\t\t\t\t\t\t+ res[int(i \/ 3)] +\r\n\t\t\t\t\t\t\tres[int(i \/ 4)]\r\n\t\t\t\t\t\t+ res[int(i \/ 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"}
{"in":"from typing import List\n\"\"\"\no から n までのすべての連続する数のハミング距離の和を求める python 関数を書きなさい。\n\"\"\"\ndef Total_Hamming_Distance(n):   \r\n","out":"i = 1\r\n    sum = 0\r\n    while (n \/\/ i > 0):  \r\n        sum = sum + n \/\/ i  \r\n        i = i * 2     \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\nすべての可能な部分配列の積の和を求める python 関数を書きなさい。\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\r\n","out":"ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列1.リスト項目1.リスト項目2.リスト項目2.\n\"\"\"\ndef count_occurance(s):\r\n","out":"count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"}
{"in":"from typing import List\n\"\"\"\n与えられた範囲内ですべてのビットがアンセットされているかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n","out":"num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"}
{"in":"from typing import List\n\"\"\"\nベル数の集合を分割する方法の数を求める関数を書きなさい。\n\"\"\"\ndef bell_number(n):   \r\n","out":"bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0]"}
{"in":"from typing import List\n\"\"\"\n与えられた組の集合から形成できる最長の鎖を求める関数を書きなさい。\n\"\"\"\ndef __init__(self, a, b): \r\n","out":"self.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"}
{"in":"from typing import List\n\"\"\"\n和が与えられた数に等しい平方数の最小値を求める python 関数を書きなさい。\n\"\"\"\ndef get_Min_Squares(n):\r\n","out":"if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"}
{"in":"from typing import List\n\"\"\"\nn番目のペル数を計算する関数を書きなさい。\n\"\"\"\ndef get_pell(n): \r\n","out":"if (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b"}
{"in":"from typing import List\n\"\"\"\n与えられた整数の配列から最大の積を持つ組を求める関数を書きなさい。\n\"\"\"\ndef max_product(arr): \r\n","out":"arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の空でない部分文字列の数を数える python 関数を書きなさい。\n\"\"\"\ndef number_of_substrings(str): \r\n","out":"str_len = len(str); \r\n\treturn int(str_len * (str_len + 1) \/ 2);"}
{"in":"from typing import List\n\"\"\"\nニューマン・コンウェイ数列のn番目の数を求める関数を書きなさい。\n\"\"\"\ndef sequence(n): \r\n","out":"if n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"}
{"in":"from typing import List\n\"\"\"\n立方体の体積を求める関数を書きなさい。\n\"\"\"\ndef volume_cube(l):\r\n","out":"volume = l * l * l\r\n  return volume"}
{"in":"from typing import List\n\"\"\"\n文字列内の部分文字列の出現率と位置を求める関数を書きなさい。\n\"\"\"\ndef occurance_substring(text,pattern):\r\n","out":"for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルの隣接する要素を乗算する関数を書きなさい。\n\"\"\"\ndef multiply_elements(test_tup):\r\n","out":"res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nn から形成できる長さ a、b、c のセグメントの最大数を求める関数を書け。\n\"\"\"\ndef maximum_segments(n, a, b, c) : \r\n","out":"dp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"}
{"in":"from typing import List\n\"\"\"\n指定された範囲のインデックス間のリストの数値の和を求める関数を書きなさい。\n\"\"\"\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n","out":"sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range"}
{"in":"from typing import List\n\"\"\"\n和がmで割り切れる部分集合があるかどうかを調べる関数を書きなさい。\n\"\"\"\ndef modular_sum(arr, n, m): \r\n","out":"if (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストの2番目の要素に基づいて1番目の要素をグループ化する関数を書きなさい。\n\"\"\"\ndef group_element(test_list):\r\n","out":"res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n指定された入れ子リストから指定された列を抽出する関数を書きなさい。\n\"\"\"\ndef extract_column(list1, n):\r\n","out":"result = [i.pop(n) for i in list1]\r\n   return result"}
{"in":"from typing import List\n\"\"\"\nすべての奇数長の部分配列の和を求める python 関数を書きなさい。\n\"\"\"\ndef Odd_Length_Sum(arr):\r\n","out":"Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) \/\/ 2) * arr[i])\r\n    return Sum"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルのペアの最小差を求める関数を書きなさい。\n\"\"\"\ndef min_difference(test_list):\r\n","out":"temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストから特定の単語を削除する関数を書きなさい。\n\"\"\"\ndef remove_words(list1, removewords):\r\n","out":"for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1"}
{"in":"from typing import List\n\"\"\"\n数列が減少傾向にあるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef decreasing_trend(nums):\r\n","out":"if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}
{"in":"from typing import List\n\"\"\"\n文字列中の複数の空白を削除する関数を書きなさい。\n\"\"\"\ndef remove_spaces(text):\r\n","out":"return (re.sub(' +',' ',text))"}
{"in":"from typing import List\n\"\"\"\nスペース、コンマ、ドットの出現をすべてコロンに置き換える関数を書きなさい。\n\"\"\"\ndef replace_specialchar(text):\r\n","out":"return (re.sub(\"[ ,.]\", \":\", text))"}
{"in":"from typing import List\n\"\"\"\n最初のn個の数の最小倍数を求める関数を書きなさい。\n\"\"\"\ndef smallest_multiple(n):\r\n","out":"if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"}
{"in":"from typing import List\n\"\"\"\n値がシーケンスの中に存在するかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef overlapping(list1,list2):  \r\n","out":"c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"}
{"in":"from typing import List\n\"\"\"\n与えられた二分木の高さを計算する関数を書きなさい。\n\"\"\"\ndef __init__(self, data): \r\n","out":"self.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"}
{"in":"from typing import List\n\"\"\"\nすべての数字が、その数字が含むすべての桁で割り切れる、与えられた範囲内の数字を求める関数を書きなさい。\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\r\n","out":"return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"}
{"in":"from typing import List\n\"\"\"\n与えられた数のリストから最初の偶数を求める python 関数を書きなさい。\n\"\"\"\ndef first_even(nums):\r\n","out":"first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"}
{"in":"from typing import List\n\"\"\"\n指定された値の左挿入点をソート順に見つける関数を書きなさい。\n\"\"\"\ndef left_insertion(a, x):\r\n","out":"i = bisect.bisect_left(a, x)\r\n    return i"}
{"in":"from typing import List\n\"\"\"\n2番目の文字列に存在する文字を1番目の文字列から取り除く関数を書きなさい。\n\"\"\"\ndef str_to_list(string): \r\n","out":"temp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind])"}
{"in":"from typing import List\n\"\"\"\nn番目の丁寧な数を求める関数を書きなさい。\n\"\"\"\ndef is_polite(n): \r\n","out":"n = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2)))"}
{"in":"from typing import List\n\"\"\"\n混合リストから偶数を見つけるpython関数を書きなさい。\n\"\"\"\ndef Split(list): \r\n","out":"ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"}
{"in":"from typing import List\n\"\"\"\n指定された数より大きいリストの値をすべて求める関数を書きなさい。\n\"\"\"\ndef greater_specificnum(list,num):\r\n","out":"greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"}
{"in":"from typing import List\n\"\"\"\na'の後に何かが続き、'b'で終わる文字列にマッチする関数を書きなさい。\n\"\"\"\ndef text_starta_endb(text):\r\n","out":"patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n最大長を持つリストのリストを見つける関数を書きなさい。\n\"\"\"\ndef max_length(list1):\r\n","out":"max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、与えられたリストの奇数要素の数を求める関数を書きなさい。\n\"\"\"\ndef count_odd(array_nums):\r\n","out":"count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"}
{"in":"from typing import List\n\"\"\"\n最初の n 個の奇数の自然数の 4 乗の和を求める python 関数を書きなさい。\n\"\"\"\ndef odd_Num_Sum(n) : \r\n","out":"j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのソートされた配列からk番目の要素を見つける関数を書きなさい。\n\"\"\"\ndef find_kth(arr1, arr2, m, n, k):\r\n","out":"sorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"}
{"in":"from typing import List\n\"\"\"\nすべての文字が同じかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef all_Characters_Same(s) :\r\n","out":"n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、文字列が有効なメールアドレスかどうかをチェックする関数を書いてください。\n\"\"\"\ndef check_email(email): \r\n","out":"if(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\")"}
{"in":"from typing import List\n\"\"\"\n文字列内のリテラル文字列を検索し、正規表現を使って元の文字列内でパターンが出現する場所を見つける関数を書きなさい。\n\"\"\"\ndef find_literals(text, pattern):\r\n","out":"match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストを2つの部分に分割する関数を書きなさい。\n\"\"\"\ndef split_two_parts(list1, L):\r\n","out":"return list1[:L], list1[L:]"}
{"in":"from typing import List\n\"\"\"\n球の表面積を求める関数を書きなさい。\n\"\"\"\ndef surfacearea_sphere(r):\r\n","out":"surfacearea=4*math.pi*r*r\r\n  return surfacearea"}
{"in":"from typing import List\n\"\"\"\ncollectionsモジュールを使って、与えられた文字列から重複する単語を削除する関数を書きなさい。\n\"\"\"\ndef remove_duplicate(string):\r\n","out":"result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"}
{"in":"from typing import List\n\"\"\"\nセットビットでもある最上位ビット数を求める python 関数を書きなさい。\n\"\"\"\ndef set_Bit_Number(n): \r\n","out":"if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n \/ 2); \r\n    while (n > 0): \r\n        n = int(n \/ 2); \r\n        msb += 1; \r\n    return (1 << msb)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列中の繰り返しでない要素の積を求める python 関数を書きなさい。\n\"\"\"\ndef find_Product(arr,n): \r\n","out":"arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod;"}
{"in":"from typing import List\n\"\"\"\n各タプルの最初の項目でタプルをアルファベット順にソートする関数を書きなさい。\n\"\"\"\ndef sort_tuple(tup): \r\n","out":"n = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"}
{"in":"from typing import List\n\"\"\"\nセクターの面積を求める関数を書きなさい。\n\"\"\"\ndef sector_area(r,a):\r\n","out":"pi=22\/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a\/360)\r\n    return sectorarea"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストの要素の順序に関係なく、タプルの交点を求める関数を書きなさい。\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\r\n","out":"res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n直線の傾きを求める python 関数を書きなさい。\n\"\"\"\ndef slope(x1,y1,x2,y2): \r\n","out":"return (float)(y2-y1)\/(x2-x1)"}
{"in":"from typing import List\n\"\"\"\n2つの辞書を1つの式にマージする関数を書いてください。\n\"\"\"\ndef merge_dictionaries(dict1,dict2):\r\n","out":"merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"}
{"in":"from typing import List\n\"\"\"\n球体の体積を求める関数を書きなさい。\n\"\"\"\ndef volume_sphere(r):\r\n","out":"volume=(4\/3)*math.pi*r*r*r\r\n  return volume"}
{"in":"from typing import List\n\"\"\"\n与えられた数列が線形かどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef Seq_Linear(seq_nums):\r\n","out":"seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""}
{"in":"from typing import List\n\"\"\"\nソートされた配列の中で、与えられた数値が最初に現れるインデックスを求める関数を書きなさい。\n\"\"\"\ndef find_first_occurrence(A, x):\r\n","out":"(left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) \/\/ 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられたコスト行列cost[][]とcost[][]内の位置(m, n)に対して、(0, 0)から(m, n)に到達するための最小コスト経路を求める関数を書きなさい。\n\"\"\"\ndef min_cost(cost, m, n): \r\n","out":"tc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"}
{"in":"from typing import List\n\"\"\"\nmapとラムダ関数を使って、2つのリストのモジュロ除算を求める関数を書きなさい。\n\"\"\"\ndef moddiv_list(nums1,nums2):\r\n","out":"result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"}
{"in":"from typing import List\n\"\"\"\n指定された値の正しい挿入点をソート順に見つける関数を書きなさい。\n\"\"\"\ndef right_insertion(a, x):\r\n","out":"i = bisect.bisect_right(a, x)\r\n    return i"}
{"in":"from typing import List\n\"\"\"\n与えられたタプル行列から似た行を取り除く関数を書きなさい。\n\"\"\"\ndef remove_similar_row(test_list):\r\n","out":"res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた直角三角形の数の最大和を求める関数を書きなさい。\n\"\"\"\ndef max_sum(tri, n): \r\n","out":"if n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"}
{"in":"from typing import List\n\"\"\"\nタプルに存在する各値のユニーク・キーをカウントする関数を書く。\n\"\"\"\ndef get_unique(test_list):\r\n","out":"res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict))"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルに含まれるリストの数を求める関数を書きなさい。\n\"\"\"\ndef find_lists(Input): \r\n","out":"if isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input)"}
{"in":"from typing import List\n\"\"\"\n与えられた数の階乗の最初の桁を求める python 関数を書きなさい。\n\"\"\"\ndef first_Digit(n) : \r\n","out":"fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact \/ 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact \/ 10) \r\n    return math.floor(fact)"}
{"in":"from typing import List\n\"\"\"\n立方体の横方向の表面積を求める関数を書きなさい。\n\"\"\"\ndef lateralsurface_cube(l):\r\n","out":"LSA = 4 * (l * l)\r\n  return LSA"}
{"in":"from typing import List\n\"\"\"\nヒープキューアルゴリズムを使って，与えられたデータセットからn個の高価な価格アイテムを見つける関数を書きなさい．\n\"\"\"\ndef expensive_items(items,n):\r\n","out":"expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"}
{"in":"from typing import List\n\"\"\"\n放物線の焦点を求める関数を書きなさい。\n\"\"\"\ndef parabola_focus(a, b, c): \r\n","out":"focus= (((-b \/ (2 * a)),(((4 * a * c) - (b * b) + 1) \/ (4 * a))))\r\n  return focus"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの最初と最後の要素を交換する python 関数を書きなさい。\n\"\"\"\ndef swap_List(newList): \r\n","out":"size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList"}
{"in":"from typing import List\n\"\"\"\n与えられた値によって生成され得る非負の接頭辞和を持つ、与えられた長さの数列を数える関数を書け。\n\"\"\"\ndef bin_coff(n, r): \r\n","out":"val = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval \/\/= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M \/\/ 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a \/\/ (n + 1) \r\n\treturn (b)"}
{"in":"from typing import List\n\"\"\"\n放物線の頂点を求める関数を書きなさい。\n\"\"\"\ndef parabola_vertex(a, b, c): \r\n","out":"vertex=(((-b \/ (2 * a)),(((4 * a * c) - (b * b)) \/ (4 * a))))\r\n  return vertex"}
{"in":"from typing import List\n\"\"\"\n次の各要素が前の要素の2倍以上m以下であるような、長さnの可能な数列の数を求める関数を書きなさい。\n\"\"\"\ndef get_total_number_of_sequences(m,n): \r\n","out":"T=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i\/\/2][j-1] \r\n\treturn T[m][n]"}
{"in":"from typing import List\n\"\"\"\nn 以下である 2 の最大べき乗を求める python 関数を書きなさい。\n\"\"\"\ndef highest_Power_of_2(n): \r\n","out":"res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res;"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列リストをタプルに変換する python 関数を書きなさい。\n\"\"\"\ndef string_list_to_tuple(str1):\r\n","out":"result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って辞書のリストをソートする関数を書きなさい。\n\"\"\"\ndef sorted_models(models):\r\n","out":"sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"}
{"in":"from typing import List\n\"\"\"\n与えられたタプル行列を、各タプルが各列を表すタプルリストに平坦化する関数を書きなさい。\n\"\"\"\ndef matrix_to_list(test_list):\r\n","out":"temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストの各タプルに頻度を割り当てる関数を書きなさい。\n\"\"\"\ndef assign_freq(test_list):\r\n","out":"res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res))"}
{"in":"from typing import List\n\"\"\"\n与えられたバイナリ・タプルを整数に変換する関数を書きなさい。\n\"\"\"\ndef binary_to_integer(test_tup):\r\n","out":"res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res))"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの文字列が互いに順列であるかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_permutation(str1, str2):\r\n","out":"n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"}
{"in":"from typing import List\n\"\"\"\n与えられたリストから整数を数える python 関数を書きなさい。\n\"\"\"\ndef count_integer(list1):\r\n","out":"ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"}
{"in":"from typing import List\n\"\"\"\nmap関数を使ってn回リストを印刷する関数を書きなさい。\n\"\"\"\ndef ntimes_list(nums,n):\r\n","out":"result = map(lambda x:n*x, nums) \r\n    return list(result)"}
{"in":"from typing import List\n\"\"\"\n与えられた月と日の季節を表示する関数を書きなさい。\n\"\"\"\ndef month_season(month,days):\r\n","out":"if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"}
{"in":"from typing import List\n\"\"\"\n辞書の深さを求める関数を書きなさい。\n\"\"\"\ndef dict_depth(d):\r\n","out":"if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"}
{"in":"from typing import List\n\"\"\"\nタプルを文字列に変換する関数を書く。\n\"\"\"\ndef tup_string(tup1):\r\n","out":"str =  ''.join(tup1)\r\n  return str"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の最大値と最小値の和を求める python 関数を書きなさい。\n\"\"\"\ndef big_sum(nums):\r\n","out":"sum= max(nums)+min(nums)\r\n      return sum"}
{"in":"from typing import List\n\"\"\"\nその中にあるすべての数字を、与えられた文字列に移動させる関数を書きなさい。\n\"\"\"\ndef move_num(test_str):\r\n","out":"res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n辺が与えられたときに三角形が有効かどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef check_Validity(a,b,c):  \r\n","out":"if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True"}
{"in":"from typing import List\n\"\"\"\n与えられた文中のすべての副詞とその位置を見つける関数を書きなさい。\n\"\"\"\ndef find_adverb_position(text):\r\n","out":"for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って偶数をフィルタリングする関数を書く。\n\"\"\"\ndef filter_evennumbers(nums):\r\n","out":"even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"}
{"in":"from typing import List\n\"\"\"\n与えられた周期関数の可能な最大値を求める python 関数を書きなさい。\n\"\"\"\ndef floor_Max(A,B,N):\r\n","out":"x = min(B - 1,N)\r\n    return (A*x) \/\/ B"}
{"in":"from typing import List\n\"\"\"\n繰り返される文字列中の文字の出現回数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Char(str,x): \r\n","out":"count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n \/\/ len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n辞書のリストをソートする関数を書きなさい。\n\"\"\"\ndef sorted_dict(dict1):\r\n","out":"sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"}
{"in":"from typing import List\n\"\"\"\n与えられた配列要素の gcd を求める関数を書きなさい。\n\"\"\"\ndef find_gcd(x, y): \r\n","out":"while(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"}
{"in":"from typing import List\n\"\"\"\n再帰を使ってフィボナッチ数列を解く関数を書け。\n\"\"\"\ndef fibonacci(n):\r\n","out":"if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"}
{"in":"from typing import List\n\"\"\"\nリスト内のすべての数値を加算し、それをリストの長さで割る関数を書きなさい。\n\"\"\"\ndef sum_num(numbers):\r\n","out":"total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total\/len(numbers)"}
{"in":"from typing import List\n\"\"\"\nローマ数字を整数に変換する関数を書きなさい。\n\"\"\"\ndef roman_to_int(s):\r\n","out":"rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"}
{"in":"from typing import List\n\"\"\"\n与えられた数が豊富かどうかを調べる関数を書きなさい。\n\"\"\"\ndef is_abundant(n):\r\n","out":"fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"}
{"in":"from typing import List\n\"\"\"\nリストのn番目の項目を選択する関数を書きなさい。\n\"\"\"\ndef nth_items(list,n):\r\n","out":"return list[::n]"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、'a'の後に何かが続き、'b'で終わる文字列にマッチする関数を書きなさい。\n\"\"\"\ndef text_match(text):\r\n","out":"patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストのタプル属性としてレコードリストの最大値を求める関数を書きなさい。\n\"\"\"\ndef maximum_value(test_list):\r\n","out":"res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nrgbカラーをhsvカラーに変換する関数を書く。\n\"\"\"\ndef rgb_to_hsv(r, g, b):\r\n","out":"r, g, b = r\/255.0, g\/255.0, b\/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)\/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)\/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)\/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df\/mx)*100\r\n    v = mx*100\r\n    return h, s, v"}
{"in":"from typing import List\n\"\"\"\n同じような初期要素を持つタプルを結合する関数を書く。\n\"\"\"\ndef join_tuples(test_list):\r\n","out":"res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた10進数を2進数に変換する関数を書きなさい。\n\"\"\"\ndef decimal_to_binary(n): \r\n","out":"return bin(n).replace(\"0b\",\"\")"}
{"in":"from typing import List\n\"\"\"\n与えられた正三角形の中にできる正三角形の最大数を数える python 関数を書きなさい。\n\"\"\"\ndef No_of_Triangle(N,K):\r\n","out":"if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) \/\/ 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) \/\/ 2;\r\n        return Tri_up + Tri_down;"}
{"in":"from typing import List\n\"\"\"\n与えられたリストから偶数を取り除く python 関数を書きなさい。\n\"\"\"\ndef remove_even(l):\r\n","out":"for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"}
{"in":"from typing import List\n\"\"\"\n8進数を10進数に変換するpython関数を書きなさい。\n\"\"\"\ndef octal_To_Decimal(n):  \r\n","out":"num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp \/ 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value;"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルのリストに共通する最初の要素を見つける関数を書きなさい。\n\"\"\"\ndef group_tuples(Input): \r\n","out":"out = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()]"}
{"in":"from typing import List\n\"\"\"\n混合リストから奇数を見つけるpython関数を書きなさい。\n\"\"\"\ndef Split(list): \r\n","out":"od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の同じ位置にある文字(小文字と大文字)を英語のアルファベットと同じように数えるpython関数を書きなさい。\n\"\"\"\ndef count_char_position(str1): \r\n","out":"count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars"}
{"in":"from typing import List\n\"\"\"\n文字列中の与えられた文字の出現回数を数える python 関数を書きなさい。\n\"\"\"\ndef count(s,c) : \r\n","out":"res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res"}
{"in":"from typing import List\n\"\"\"\n文字列中の空白を任意の文字に置き換える関数を書きなさい。\n\"\"\"\ndef replace_blank(str1,char):\r\n","out":"str2 = str1.replace(' ', char)\r\n return str2"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の中で繰り返しのない要素の和を求める python 関数を書きなさい。\n\"\"\"\ndef find_Sum(arr,n): \r\n","out":"arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列をリスト内のすべての項目の先頭に挿入する関数を書きなさい。\n\"\"\"\ndef add_string(list,string):\r\n","out":"add_string=[string.format(i) for i in  list]\r\n return add_string"}
{"in":"from typing import List\n\"\"\"\nn-1 の調和和を計算する関数を書け。\n\"\"\"\ndef harmonic_sum(n):\r\n","out":"if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 \/ n + (harmonic_sum(n - 1))"}
{"in":"from typing import List\n\"\"\"\n2つの部分配列が同じ位置に同じ文字列を持たないように、最も長く繰り返される部分配列を数える関数を書きなさい。\n\"\"\"\ndef find_longest_repeating_subseq(str): \r\n","out":"n = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"}
{"in":"from typing import List\n\"\"\"\n与えられた数が2のゼロでない累乗の和として表現できるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n): \r\n","out":"if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"}
{"in":"from typing import List\n\"\"\"\n配列を分割し、最初の部分を最後に追加するpython関数を書きなさい。\n\"\"\"\ndef split_Arr(a,n,k):  \r\n","out":"b = a[:k] \r\n   return (a[k::]+b[::])"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列中の数値を数える python 関数を書きなさい。\n\"\"\"\ndef number_ctr(str):\r\n","out":"number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"}
{"in":"from typing import List\n\"\"\"\n与えられた数のすべての素因数の和を求める python 関数を書きなさい。\n\"\"\"\ndef Sum(N): \r\n","out":"SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N]"}
{"in":"from typing import List\n\"\"\"\n3つの異なる色から指定された数の色を選び、繰り返しを含むすべての組み合わせを生成する関数を書きなさい。\n\"\"\"\ndef combinations_colors(l, n):\r\n","out":"return list(combinations_with_replacement(l,n))"}
{"in":"from typing import List\n\"\"\"\n2つの正の整数のgcdを求めるpython関数を書きなさい。\n\"\"\"\ndef gcd(x, y):\r\n","out":"gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y \/ 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"}
{"in":"from typing import List\n\"\"\"\n与えられた年の奇数日の数を計算する python 関数を書きなさい。\n\"\"\"\ndef odd_Days(N): \r\n","out":"hund1 = N \/\/ 100\r\n    hund4 = N \/\/ 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd"}
{"in":"from typing import List\n\"\"\"\n与えられた行列を、その行の和に従って昇順にソートする関数を書け。\n\"\"\"\ndef sort_matrix(M):\r\n","out":"result = sorted(M, key=sum)\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた2次元リストから最初の要素または指定された要素をすべて取り出す関数を書きなさい。\n\"\"\"\ndef specified_element(nums, N):\r\n","out":"result = [i[N] for i in nums]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n2つの整数を加算する関数を書きなさい。ただし、和が与えられた範囲の間にある場合は20を返す。\n\"\"\"\ndef sum_nums(x, y,m,n):\r\n","out":"sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"}
{"in":"from typing import List\n\"\"\"\n与えられた数の素因数の明瞭なべき乗の数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Fac(n):  \r\n","out":"m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n \/= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count"}
{"in":"from typing import List\n\"\"\"\n与えられた月名が30日を含むかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_monthnumber(monthname3):\r\n","out":"if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って大文字、小文字、特殊文字、数値を検索する関数を書く。\n\"\"\"\ndef find_character(string):\r\n","out":"uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"}
{"in":"from typing import List\n\"\"\"\n文字列のリストからすべての数字を削除するpython関数を書きなさい。\n\"\"\"\ndef remove(list): \r\n","out":"pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"}
{"in":"from typing import List\n\"\"\"\nリストのリストを長さと値でソートする関数を書きなさい。\n\"\"\"\ndef sort_sublists(list1):\r\n","out":"list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"}
{"in":"from typing import List\n\"\"\"\n与えられた整数の文字列をタプルに変換する関数を書きなさい。\n\"\"\"\ndef str_to_tuple(test_str):\r\n","out":"res = tuple(map(int, test_str.split(', ')))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nカウンティングソートを使って、与えられた配列をソートする関数を書きなさい。\n\"\"\"\ndef counting_sort(my_list):\r\n","out":"max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの最小値のインデックス位置をすべて求める関数を書きなさい。\n\"\"\"\ndef position_min(list1):\r\n","out":"min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"}
{"in":"from typing import List\n\"\"\"\nすべての数値が互いに異なるかどうかを判定する python 関数を書きなさい。\n\"\"\"\ndef test_distinct(data):\r\n","out":"if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"}
{"in":"from typing import List\n\"\"\"\n正規表現を使用して、文字列内の複数のスペースを削除する関数を作成する。\n\"\"\"\ndef remove_multiple_spaces(text1):\r\n","out":"return (re.sub(' +',' ',text1))"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って文字列内のリテラル文字列を検索する関数を作成する。\n\"\"\"\ndef check_literals(text, patterns):\r\n","out":"for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの連続した数を乗算する関数を書きなさい。\n\"\"\"\ndef mul_consecutive_nums(nums):\r\n","out":"result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の中で最もよく使われる文字を数える関数を書きなさい。\n\"\"\"\ndef max_char(str1):\r\n","out":"temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"}
{"in":"from typing import List\n\"\"\"\n最初のn個の自然数の和と平均を求める関数を書きなさい。\n\"\"\"\ndef sum_average(number):\r\n","out":"total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total \/ number\r\n return (total,average)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルから特定のデータ型の要素を削除する関数を書く。\n\"\"\"\ndef remove_datatype(test_tuple, data_type):\r\n","out":"res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた数値の最初と最後のビットだけを切り替える python 関数を書きなさい。\n\"\"\"\ndef take_L_and_F_set_bits(n) : \r\n","out":"n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n)"}
{"in":"from typing import List\n\"\"\"\n3つの数の最小値を求める関数を書きなさい。\n\"\"\"\ndef min_of_three(a,b,c): \r\n","out":"if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest"}
{"in":"from typing import List\n\"\"\"\nランレングス符号化された与えられたリストをデコードする関数を書きなさい。\n\"\"\"\ndef decode_list(alist):\r\n","out":"def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"}
{"in":"from typing import List\n\"\"\"\nデータセットから最大の n 個の項目を取得する関数を書きなさい．\n\"\"\"\ndef larg_nnum(list1,n):\r\n","out":"largest=heapq.nlargest(n,list1)\r\n return largest"}
{"in":"from typing import List\n\"\"\"\n2番目のタプルの各要素が、1番目のタプルの対応するインデックスより大きいかどうかをチェックする関数を書く。\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\r\n","out":"res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nリストの最初と最後の要素を別々にマージする python 関数を書いてください。\n\"\"\"\ndef merge(lst):  \r\n","out":"return [list(ele) for ele in list(zip(*lst))]"}
{"in":"from typing import List\n\"\"\"\n10進数を2進数に変換するpython関数を書きなさい。\n\"\"\"\ndef decimal_To_Binary(N): \r\n","out":"B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N \/\/= 2 \r\n        cnt += 1\r\n    return B_Number"}
{"in":"from typing import List\n\"\"\"\n与えられた数のすべての偶数ビットをトグルする python 関数を書きなさい。\n\"\"\"\ndef even_bit_toggle_number(n) : \r\n","out":"res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res"}
{"in":"from typing import List\n\"\"\"\n与えられた位置までの配列を反転させる python 関数を書きなさい。\n\"\"\"\ndef reverse_Array_Upto_K(input, k): \r\n","out":"return (input[k-1::-1] + input[k:])"}
{"in":"from typing import List\n\"\"\"\nz'を含む単語にマッチする関数を書きなさい。\n\"\"\"\ndef text_match_wordz_middle(text):\r\n","out":"patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、aの後に0個以上のbが続く文字列にマッチする関数を書きなさい。\n\"\"\"\ndef text_match(text):\r\n","out":"patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n与えられた数の奇数パリティをチェックする python 関数を書きなさい。\n\"\"\"\ndef check_Odd_Parity(x): \r\n","out":"parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、与えられたリストの文字列の各サブリストをソートする関数を書きなさい。\n\"\"\"\ndef sort_sublists(input_list):\r\n","out":"result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の中で最大の値の頻度を求める python 関数を書きなさい。\n\"\"\"\ndef frequency_Of_Largest(n,arr): \r\n","out":"mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルの中から最大と最小のk個の要素を抽出する関数を書きなさい。\n\"\"\"\ndef extract_min_max(test_tup, K):\r\n","out":"res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n立方体の体積を求める関数を書きなさい。\n\"\"\"\ndef volume_cuboid(l,w,h):\r\n","out":"volume=l*w*h\r\n  return volume"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の平衡指数を求める関数を書きなさい。\n\"\"\"\ndef equilibrium_index(arr):\r\n","out":"total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリスト内の利用可能なペアの最大差を求める関数を書きなさい。\n\"\"\"\ndef max_difference(test_list):\r\n","out":"temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nリスト内の一意なリストの数を数える関数を書きなさい。\n\"\"\"\ndef unique_sublists(list1):\r\n","out":"result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのタプルをzipにする関数を書きなさい。\n\"\"\"\ndef zip_tuples(test_tup1, test_tup2):\r\n","out":"res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の最初と最後の文字が等しいかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef check_Equality(str):\r\n","out":"if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\")"}
{"in":"from typing import List\n\"\"\"\nn番目の星の数を求める関数を書きなさい。\n\"\"\"\ndef find_star_num(n): \r\n","out":"return (6 * n * (n - 1) + 1)"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列から小文字の部分文字列を取り除く関数を書きなさい。\n\"\"\"\ndef remove_lowercase(str1):\r\n","out":"remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列値のリストの中の文字列を反転させる関数を書きなさい。\n\"\"\"\ndef reverse_string_list(stringlist):\r\n","out":"result = [x[::-1] for x in stringlist]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられたリスト要素の連続する重複をサブリストにパックする関数を書きなさい。\n\"\"\"\ndef pack_consecutive_duplicates(list1):\r\n","out":"return [list(group) for key, group in groupby(list1)]"}
{"in":"from typing import List\n\"\"\"\n与えられた数の最大の素因数を求める python 関数を書きなさい。\n\"\"\"\ndef max_Prime_Factors (n): \r\n","out":"maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n \/ i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"}
{"in":"from typing import List\n\"\"\"\nタプルのリストから最大の集約を計算する関数を書きなさい。\n\"\"\"\ndef max_aggregate(stdata):\r\n","out":"temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"}
{"in":"from typing import List\n\"\"\"\n与えられた異種リストの最小値を求める関数を書きなさい。\n\"\"\"\ndef min_val(listval):\r\n","out":"min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"}
{"in":"from typing import List\n\"\"\"\n与えられた数のリストから重複する2つの数を削除するpython関数を書きなさい。\n\"\"\"\ndef two_unique_nums(nums):\r\n","out":"return [i for i in nums if nums.count(i)==1]"}
{"in":"from typing import List\n\"\"\"\n2つの型の反転カウントが同じかどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef solve(a,n):   \r\n","out":"mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"}
{"in":"from typing import List\n\"\"\"\n与えられた数がウッドボールかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef is_woodall(x): \r\n","out":"if (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x\/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"}
{"in":"from typing import List\n\"\"\"\n空の辞書のリストを作成する関数を書いてください。\n\"\"\"\ndef empty_list(length):\r\n","out":"empty_list = [{} for _ in range(length)]\r\n return empty_list"}
{"in":"from typing import List\n\"\"\"\n与えられたリストのリストの数を数え、その数を2乗する関数を書きなさい。\n\"\"\"\ndef count_list(input_list): \r\n","out":"return (len(input_list))**2"}
{"in":"from typing import List\n\"\"\"\nax + by = nを満たすxとyを求める関数を書きなさい。\n\"\"\"\ndef solution (a, b, n): \r\n","out":"i = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) \/ b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\")"}
{"in":"from typing import List\n\"\"\"\n与えられた順序付きリストに基づいて、与えられたタプルを並べ替える関数を書きなさい。\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\r\n","out":"temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた数のすべての偶数ビットを設定する python 関数を書きなさい。\n\"\"\"\ndef even_bit_set_number(n): \r\n","out":"count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res)"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのタプルのタプル要素のモジュロを実行する関数を書きなさい。\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\r\n","out":"res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列中の単語を反転させる関数を書きなさい。\n\"\"\"\ndef reverse_words(s):\r\n","out":"return ' '.join(reversed(s.split()))"}
{"in":"from typing import List\n\"\"\"\n円柱の横方向の表面積を求める関数を書きなさい。\n\"\"\"\ndef lateralsuface_cylinder(r,h):\r\n","out":"lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"}
{"in":"from typing import List\n\"\"\"\nmap関数を使って、与えられた文字列のリストを個別にリストアップする関数を書きなさい。\n\"\"\"\ndef listify_list(list1):\r\n","out":"result = list(map(list,list1)) \r\n  return result"}
{"in":"from typing import List\n\"\"\"\nn 以上の 2 の最小べき乗を求める python 関数を書きなさい。\n\"\"\"\ndef next_Power_Of_2(n): \r\n","out":"count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count;"}
{"in":"from typing import List\n\"\"\"\nz'を含む単語にマッチする関数を書きなさい。\n\"\"\"\ndef text_match_wordz(text):\r\n","out":"patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列リストの中で最も出現回数の多い単語を取得する関数を書きなさい。\n\"\"\"\ndef most_occurrences(test_list):\r\n","out":"temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res))"}
{"in":"from typing import List\n\"\"\"\n電気代を計算する関数を書きなさい。\n\"\"\"\ndef cal_electbill(units):\r\n","out":"if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"}
{"in":"from typing import List\n\"\"\"\n同じ文字で始まり、同じ文字で終わるすべての部分文字列を数えるpython関数を書きなさい。\n\"\"\"\ndef check_Equality(s): \r\n","out":"return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result;"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列が部分文字列で始まっているかどうかをチェックする関数を書く。\n\"\"\"\ndef check_substring(string, sample) : \r\n","out":"if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリスト内のタプルとの和の組み合わせを求める関数を書きなさい。\n\"\"\"\ndef find_combinations(test_list):\r\n","out":"res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nソートされた配列に存在する余分な要素のインデックスを求める python 関数を書きなさい。\n\"\"\"\ndef find_Extra(arr1,arr2,n) : \r\n","out":"for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストのタプル要素の反転を求める関数を書きなさい。\n\"\"\"\ndef inversion_elements(test_tup):\r\n","out":"res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルのすべての数の積を計算する python 関数を書きなさい。\n\"\"\"\ndef mutiple_tuple(nums):\r\n","out":"temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"}
{"in":"from typing import List\n\"\"\"\nn 個の自然数の 4 乗の和を求める python 関数を書きなさい。\n\"\"\"\ndef fourth_Power_Sum(n): \r\n","out":"sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\n与えられたリストからk番目の要素を削除するpython関数を書きなさい。\n\"\"\"\ndef remove_kth_element(list1, L):\r\n","out":"return  list1[:L-1] + list1[L:]"}
{"in":"from typing import List\n\"\"\"\n与えられた角度で正の面積の三角形ができるかどうかをチェックする関数を書け。\n\"\"\"\ndef is_triangleexists(a,b,c): \r\n","out":"if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使用して、リストの各要素のn乗を求める関数を書きなさい。\n\"\"\"\ndef nth_nums(nums,n):\r\n","out":"nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"}
{"in":"from typing import List\n\"\"\"\n右端のセットビットの位置を取得する python 関数を書きなさい。\n\"\"\"\ndef get_First_Set_Bit_Pos(n):\r\n","out":"return math.log2(n&-n)+1"}
{"in":"from typing import List\n\"\"\"\nパスワードが有効であれば真を返す関数を書く。\n\"\"\"\ndef pass_validity(p):\r\n","out":"x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n与えられた配列をk回繰り返すことによって形成される修正配列において，連続する配列の最大の和を求める関数を書きなさい．\n\"\"\"\ndef max_sub_array_sum_repeated(a, n, k): \r\n","out":"max_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"}
{"in":"from typing import List\n\"\"\"\n五角形の面積を求める関数を書きなさい。\n\"\"\"\ndef area_pentagon(a):\r\n","out":"area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))\/4.0\r\n  return area"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの最初の偶数と奇数の差を求める関数を書きなさい。\n\"\"\"\ndef diff_even_odd(list1):\r\n","out":"first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"}
{"in":"from typing import List\n\"\"\"\n与えられた整数の配列から最大の積を持つペアを見つける python 関数を書きなさい。\n\"\"\"\ndef max_Product(arr): \r\n","out":"arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y"}
{"in":"from typing import List\n\"\"\"\n要素がタプルになるまでリストの要素を数える関数を書きなさい。\n\"\"\"\ndef count_elim(num):\r\n","out":"count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"}
{"in":"from typing import List\n\"\"\"\n与えられた配列が単調かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef is_Monotonic(A): \r\n","out":"return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))"}
{"in":"from typing import List\n\"\"\"\n文字列から英数字以外を取り除く関数を書きなさい。\n\"\"\"\ndef remove_splchar(text): \r\n","out":"pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"}
{"in":"from typing import List\n\"\"\"\nパーリン数の和を計算する関数を書きなさい。\n\"\"\"\ndef cal_sum(n): \r\n","out":"a = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"}
{"in":"from typing import List\n\"\"\"\n重複を含む、与えられた文字列のすべての順列を表示する関数を書きなさい。\n\"\"\"\ndef permute_string(str):\r\n","out":"if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"}
{"in":"from typing import List\n\"\"\"\n数の積が偶数かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef is_Product_Even(arr,n): \r\n","out":"for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのタプルリストから類似の要素を見つける関数を書きなさい。\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\r\n","out":"res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた辞書の値から一意な値を抽出する関数を書きなさい。\n\"\"\"\ndef extract_unique(test_dict):\r\n","out":"res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"}
{"in":"from typing import List\n\"\"\"\n緯度と経度を用いて2点間の距離を計算する関数を書く。\n\"\"\"\ndef distance_lat_long(slat,slon,elat,elon):\r\n","out":"dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"}
{"in":"from typing import List\n\"\"\"\n与えられたIPアドレスが有効かどうかを正規表現を使ってチェックする関数を書く。\n\"\"\"\ndef check_IP(Ip): \r\n","out":"if(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\")"}
{"in":"from typing import List\n\"\"\"\nタプルの最初の要素の出現に基づいて、与えられたリストをソートする関数を書きなさい。\n\"\"\"\ndef sort_on_occurence(lst): \r\n","out":"dct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()])"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの文字列が互いに同型かどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef is_Isomorphic(str1,str2):          \r\n","out":"dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"}
{"in":"from typing import List\n\"\"\"\n非負整数の和を求める関数を書きなさい。\n\"\"\"\ndef sum_digits(n):\r\n","out":"if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n \/ 10))"}
{"in":"from typing import List\n\"\"\"\nくし形ソートを使って要素のリストをソートする関数を書きなさい。\n\"\"\"\ndef comb_sort(nums):\r\n","out":"shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) \/ shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"}
{"in":"from typing import List\n\"\"\"\n3つのリストから共通のインデックス要素を見つける関数を書きなさい。\n\"\"\"\ndef extract_index_list(l1, l2, l3):\r\n","out":"result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列から英数字以外を取り除く関数を書きなさい。\n\"\"\"\ndef remove_extra_char(text1):\r\n","out":"pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列がバイナリ文字列かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef check(string) :\r\n","out":"p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\")"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列のすべての文字を足してできた文字を求める python 関数を書きなさい。\n\"\"\"\ndef get_Char(strr):  \r\n","out":"summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"}
{"in":"from typing import List\n\"\"\"\n正多角形の周囲長を計算する関数を書きなさい。\n\"\"\"\ndef perimeter_polygon(s,l):\r\n","out":"perimeter = s*l\r\n  return perimeter"}
{"in":"from typing import List\n\"\"\"\n入れ子リストが別の入れ子リストのサブセットであるかどうかをチェックする関数を書いてください。\n\"\"\"\ndef check_subset(list1,list2): \r\n","out":"return all(map(list1.__contains__,list2))"}
{"in":"from typing import List\n\"\"\"\n最初の n 個の奇数の自然数の 3 乗和を求める python 関数を書きなさい。\n\"\"\"\ndef cube_Sum(n): \r\n","out":"sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\n複素数の角度を求める関数を書きなさい。\n\"\"\"\ndef angle_complex(a,b):\r\n","out":"cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"}
{"in":"from typing import List\n\"\"\"\n別の与えられたリストから要素を取り出してリストを作成する関数を書きなさい。\n\"\"\"\ndef alternate_elements(list1):\r\n","out":"result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n入力された数値が与えられた配列の要素より大きいかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_greater(arr, number):\r\n","out":"arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"}
{"in":"from typing import List\n\"\"\"\n与えられた配列について，隣接間の差が1になるような最も長い部分配列を求める関数を書きなさい．\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n): \r\n","out":"dp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"}
{"in":"from typing import List\n\"\"\"\n括弧の文字列の妥当性を検証する関数を書きなさい。\n\"\"\"\ndef is_valid_parenthese( str1):\r\n","out":"stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"}
{"in":"from typing import List\n\"\"\"\n2つの文字列タプルを連結する関数を書く。\n\"\"\"\ndef concatenate_strings(test_tup1, test_tup2):\r\n","out":"res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って文字と数字以外のすべての文字を削除する関数を書く\n\"\"\"\ndef remove_char(S):\r\n","out":"result = re.sub('[\\W_]+', '', S) \r\n  return result"}
{"in":"from typing import List\n\"\"\"\n標準偏差を計算する関数を書きなさい。\n\"\"\"\ndef sd_calc(data):\r\n","out":"n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd \/ float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean \/ float(n)\r\n    return mean"}
{"in":"from typing import List\n\"\"\"\n与えられた開始範囲と終了範囲の値で、与えられたリストから欠けている範囲を抽出する関数を書きなさい。\n\"\"\"\ndef extract_missing(test_list, strt_val, stop_val):\r\n","out":"res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n円錐の体積を求める関数を書きなさい。\n\"\"\"\ndef volume_cone(r,h):\r\n","out":"volume = (1.0\/3) * math.pi * r * r * h\r\n  return volume"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの中で最大の出現回数を持つ項目を見つける関数を書きなさい。\n\"\"\"\ndef max_occurrences(list1):\r\n","out":"max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"}
{"in":"from typing import List\n\"\"\"\n直角三角形の三辺を求める関数を書きなさい。\n\"\"\"\ndef otherside_rightangle(w,h):\r\n","out":"s=math.sqrt((w*w)+(h*h))\r\n  return s"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の最大増加部分配列の和を求める関数を書きなさい。\n\"\"\"\ndef max_sum_increasing_subsequence(arr, n): \r\n","out":"max = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"}
{"in":"from typing import List\n\"\"\"\n2つの数の最小値を求める関数を書きなさい。\n\"\"\"\ndef min_of_two( x, y ):\r\n","out":"if x < y:\r\n        return x\r\n    return y"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの中から、与えられた範囲外のサブリストを削除する関数を書きなさい。\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\r\n","out":"result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"}
{"in":"from typing import List\n\"\"\"\n文字列を大文字で分割する関数を書きなさい。\n\"\"\"\ndef split_upperstring(text):\r\n","out":"return (re.findall('[A-Z][^A-Z]*', text))"}
{"in":"from typing import List\n\"\"\"\n与えられた年の干支を表示する関数を書きなさい。\n\"\"\"\ndef chinese_zodiac(year):\r\n","out":"if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"}
{"in":"from typing import List\n\"\"\"\n与えられた辞書内のすべての項目の合計を求める関数を書く。\n\"\"\"\ndef return_sum(dict):\r\n","out":"sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"}
{"in":"from typing import List\n\"\"\"\nデータセットから最小のn個の項目を取得する関数を書きなさい。\n\"\"\"\ndef small_nnum(list1,n):\r\n","out":"smallest=heapq.nsmallest(n,list1)\r\n  return smallest"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストから対称なペアをすべて抽出する関数を書きなさい。\n\"\"\"\ndef extract_symmetric(test_list):\r\n","out":"temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n等比数列のt-n番目の項を求める関数を書きなさい。\n\"\"\"\ndef tn_ap(a,n,d):\r\n","out":"tn = a + (n - 1) * d\r\n  return tn"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、与えられた文字列リストから回文を見つける関数を書きなさい。\n\"\"\"\ndef palindrome_lambda(texts):\r\n","out":"result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"}
{"in":"from typing import List\n\"\"\"\nn番目の四面体数を求める関数を書きなさい。\n\"\"\"\ndef tetrahedral_number(n): \r\n","out":"return (n * (n + 1) * (n + 2)) \/ 6"}
{"in":"from typing import List\n\"\"\"\n与えられた異種リストの最大値を求める関数を書きなさい。\n\"\"\"\ndef max_val(listval):\r\n","out":"max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"}
{"in":"from typing import List\n\"\"\"\n二項係数の二乗和を求めるpython関数を書きなさい。\n\"\"\"\ndef factorial(start,end): \r\n","out":"res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  \/factorial(1, n))"}
{"in":"from typing import List\n\"\"\"\n与えられたリストに要素があるかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_element(test_tup, check_list):\r\n","out":"res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n同じ長さのリストをインターリーブする関数を書きなさい。\n\"\"\"\ndef interleave_lists(list1,list2,list3):\r\n","out":"result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられたリストに与えられたタプルを追加する関数を書きなさい。\n\"\"\"\ndef add_tuple(test_list, test_tup):\r\n","out":"test_list += test_tup\r\n  return (test_list)"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列の引用符の間の値を抽出する関数を書きなさい。\n\"\"\"\ndef extract_quotation(text1):\r\n","out":"return (re.findall(r'\"(.*?)\"', text1))"}
{"in":"from typing import List\n\"\"\"\nタプル中のリストの全要素の出現回数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Occurrence(tup, lst): \r\n","out":"count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count"}
{"in":"from typing import List\n\"\"\"\nあるタプルが別のタプルのサブセットであるかどうかをチェックする関数を書く。\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\r\n","out":"res = set(test_tup2).issubset(test_tup1)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた金額が利益を持つ場合、利益額を与える関数を書きなさい、さもなければ何も返さない。\n\"\"\"\ndef profit_amount(actual_cost,sale_amount): \r\n","out":"if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"}
{"in":"from typing import List\n\"\"\"\nmap関数を使用して、インデックスに対応する数値を基数として上げた数値のべき乗を含むリストを作成する関数を書きなさい。\n\"\"\"\ndef basesnum_coresspondingnum(bases_num,index):\r\n","out":"result = list(map(pow, bases_num, index))\r\n  return result"}
{"in":"from typing import List\n\"\"\"\n与えられたリストを指定された数だけ右方向に回転させる関数を書きなさい。\n\"\"\"\ndef rotate_right(list1,m,n):\r\n","out":"result =  list1[-(m):]+list1[:-(n)]\r\n  return result"}
{"in":"from typing import List\n\"\"\"\n与えられた範囲の16進数を数えるpython関数を書きなさい。\n\"\"\"\ndef count_Hexadecimal(L,R) :  \r\n","out":"count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k \/\/ 16;  \r\n    return count;"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの数の適切な分数のn桁目を求めるpython関数を書きなさい。\n\"\"\"\ndef find_Nth_Digit(p,q,N) :  \r\n","out":"while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p \/\/ q;  \r\n        p %= q;  \r\n    return res;"}
{"in":"from typing import List\n\"\"\"\n与えられた集合を順序付きタプルに変換する関数を書きなさい。\n\"\"\"\ndef set_to_tuple(s):\r\n","out":"t = tuple(sorted(s))\r\n  return (t)"}
{"in":"from typing import List\n\"\"\"\nサイズnのタプルをチャンキングする関数を書いてください。\n\"\"\"\ndef chunk_tuples(test_tup, N):\r\n","out":"res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nそれぞれの組が割り切れる最大の部分集合を求める関数を書きなさい。\n\"\"\"\ndef largest_subset(a, n):\r\n","out":"dp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプル内の各文字列の後方インデックス要素のみを抽出する関数を書きなさい。\n\"\"\"\ndef extract_rear(test_tuple):\r\n","out":"res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた数の桁を並べ替えて、次に大きな数を作る関数を書きなさい。\n\"\"\"\ndef rearrange_bigger(n):\r\n","out":"nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n金鉱の問題を解く関数を書きなさい。\n\"\"\"\ndef get_maxgold(gold, m, n): \r\n","out":"goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res"}
{"in":"from typing import List\n\"\"\"\n文字列の先頭の単語にマッチする関数を書きなさい。\n\"\"\"\ndef text_match_string(text):\r\n","out":"patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"}
{"in":"from typing import List\n\"\"\"\n一連のキーと値のペアをリストの辞書にグループ化する関数を書いてください。\n\"\"\"\ndef group_keyvalue(l):\r\n","out":"result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n各要素が'*'である3次元配列を生成する関数を書きなさい。\n\"\"\"\ndef array_3d(m,n,o):\r\n","out":"array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"}
{"in":"from typing import List\n\"\"\"\n小文字で始まる名前を取り除いた後、与えられた名前のリストの長さを合計する関数を書きなさい。\n\"\"\"\ndef sample_nam(sample_names):\r\n","out":"sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の中で母音を隣接文字として持つ文字を数える関数を書きなさい。\n\"\"\"\ndef count_vowels(test_str):\r\n","out":"res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n鉄道\/バス駅に必要なホームの最小数を求める関数を書きなさい。\n\"\"\"\ndef find_platform(arr, dep, n): \r\n","out":"arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられたリストから最大の負の数を求める python 関数を書きなさい。\n\"\"\"\ndef largest_neg(list1): \r\n","out":"max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"}
{"in":"from typing import List\n\"\"\"\n最初の n 個の偶数の自然数の平方和を求める python 関数を書きなさい。\n\"\"\"\ndef square_Sum(n):  \r\n","out":"return int(2*n*(n+1)*(2*n+1)\/3)"}
{"in":"from typing import List\n\"\"\"\nソートされた配列の中で、欠けている最小の要素を見つける関数を書きなさい。\n\"\"\"\ndef smallest_missing(A, left_element, right_element):\r\n","out":"if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) \/\/ 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストに連続した数字が含まれているかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef check_Consecutive(l): \r\n","out":"return sorted(l) == list(range(min(l),max(l)+1))"}
{"in":"from typing import List\n\"\"\"\nリストの中で2番目に小さい数を求める関数を書きなさい。\n\"\"\"\ndef second_smallest(numbers):\r\n","out":"if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1]"}
{"in":"from typing import List\n\"\"\"\n与えられた入れ子のタプルの要素を減算する関数を書きなさい。\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\r\n","out":"res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた数値のセットビットを数える python 関数を書きなさい。\n\"\"\"\ndef count_Set_Bits(n): \r\n","out":"count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルの隣接要素を連結する関数を書きなさい。\n\"\"\"\ndef concatenate_elements(test_tup):\r\n","out":"res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nn番目のキャロル番号を求める関数を書きなさい。\n\"\"\"\ndef get_carol(n): \r\n","out":"result = (2**n) - 1\r\n\treturn result * result - 2"}
{"in":"from typing import List\n\"\"\"\nmapとラムダ関数を使って2つのリストを分割する関数を書く。\n\"\"\"\ndef div_list(nums1,nums2):\r\n","out":"result = map(lambda x, y: x \/ y, nums1, nums2)\r\n  return list(result)"}
{"in":"from typing import List\n\"\"\"\n2つのリストの要素を合計する関数を書きなさい。\n\"\"\"\ndef sum_list(lst1,lst2):\r\n","out":"res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"}
{"in":"from typing import List\n\"\"\"\nstr1とstr2の両方を部分文字列として持つ最も短い文字列の長さを求める関数を書きなさい。\n\"\"\"\ndef super_seq(X, Y, m, n):\r\n","out":"if (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"}
{"in":"from typing import List\n\"\"\"\nバイナリ配列をソートするのに必要な最小の隣接スワップを求める python 関数を書きなさい。\n\"\"\"\ndef find_Min_Swaps(arr,n) : \r\n","out":"noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count"}
{"in":"from typing import List\n\"\"\"\n指定された入れ子リストから指定された列を削除する関数を書きなさい。\n\"\"\"\ndef remove_column(list1, n):\r\n","out":"for i in list1: \r\n    del i[n] \r\n   return list1"}
{"in":"from typing import List\n\"\"\"\n配列が別の配列の部分配列であるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef is_Sub_Array(A,B,n,m): \r\n","out":"i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False;"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルから入れ子になったレコードを削除する関数を書く。\n\"\"\"\ndef remove_nested(test_tup):\r\n","out":"res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nひし形の外周を求める関数を書きなさい。\n\"\"\"\ndef rombus_perimeter(a):\r\n","out":"perimeter=4*a\r\n  return perimeter"}
{"in":"from typing import List\n\"\"\"\n与えられた数列の最長増加部分列の長さを求める関数を書きなさい。\n\"\"\"\ndef longest_increasing_subsequence(arr): \r\n","out":"n = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"}
{"in":"from typing import List\n\"\"\"\n約数のカウントが偶数か奇数かをチェックする python 関数を書きなさい。\n\"\"\"\ndef count_Divisors(n) : \r\n","out":"count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n \/\/ i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\")"}
{"in":"from typing import List\n\"\"\"\n共通のキーの値を追加して2つの辞書を結合する関数を書いてください。\n\"\"\"\ndef add_dict(d1,d2):\r\n","out":"add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"}
{"in":"from typing import List\n\"\"\"\n複数回出現するタプル要素を削除し、重複をカスタム値に置き換える関数を書く。\n\"\"\"\ndef remove_replica(test_tup):\r\n","out":"temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた数値の未設定ビットを数える python 関数を書きなさい。\n\"\"\"\ndef count_unset_bits(n): \r\n","out":"count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n与えられた各配列から少なくとも1つの要素を含む最小の範囲を求める関数を書きなさい。\n\"\"\"\ndef __init__(self, value, list_num, index):\r\n","out":"self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"}
{"in":"from typing import List\n\"\"\"\n与えられたインデックスにある要素を回転の回数分見つけるpython関数を書きなさい。\n\"\"\"\ndef find_Element(arr,ranges,rotations,index) :  \r\n","out":"for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index]"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの要素が一意かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef all_unique(test_list):\r\n","out":"if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"}
{"in":"from typing import List\n\"\"\"\n与えられた2次元リストから指定された要素をすべて取り出す関数を書きなさい。\n\"\"\"\ndef specified_element(nums, N):\r\n","out":"result = [i[N] for i in nums]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\nあるバイナリ文字列を別のバイナリ文字列に変換するのに必要なスワップの最小回数を数えるpython関数を書きなさい。\n\"\"\"\ndef min_Swaps(str1,str2) : \r\n","out":"count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count \/\/ 2) \r\n    else : \r\n        return (\"Not Possible\")"}
{"in":"from typing import List\n\"\"\"\n大きさ n の立方体に含まれる大きさ k の立方体の数を数える python 関数を書きなさい。\n\"\"\"\ndef No_of_cubes(N,K):\r\n","out":"No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"}
{"in":"from typing import List\n\"\"\"\n三角形が正三角形かどうかを表示する関数を書きなさい。\n\"\"\"\ndef check_isosceles(x,y,z):\r\n","out":"if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"}
{"in":"from typing import List\n\"\"\"\nリスト内の一意なリストの数を数える関数を書きなさい。\n\"\"\"\ndef unique_sublists(list1):\r\n","out":"result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n最初の n 個の自然数の 3 乗和を求める python 関数を書きなさい。\n\"\"\"\ndef sum_Of_Series(n): \r\n","out":"sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列から長さkの単語をすべて取り除く関数を書きなさい。\n\"\"\"\ndef remove_length(test_str, K):\r\n","out":"temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n2次元平面上の原点から(d, 0)の形の点に到達するのに必要な、与えられた長さのジャンプの回数をチェックする関数を書きなさい。\n\"\"\"\ndef min_Jumps(a, b, d): \r\n","out":"temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) \/ b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"}
{"in":"from typing import List\n\"\"\"\n桁数の和が最大になるように、数を2つに分割する関数を書きなさい。\n\"\"\"\ndef sum_digits_single(x) : \r\n","out":"ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x \/\/= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A)"}
{"in":"from typing import List\n\"\"\"\n指定された範囲の添字間のリストの数値の和を計算する python 関数を書きなさい。\n\"\"\"\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n","out":"sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range"}
{"in":"from typing import List\n\"\"\"\n辞書が空かどうかをチェックする関数を書きなさい。\n\"\"\"\ndef my_dict(dict1):\r\n","out":"if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"}
{"in":"from typing import List\n\"\"\"\n最初の n 個の自然数の 3 乗和と最初の n 個の自然数の和の差を求める python 関数を書きなさい。\n\"\"\"\ndef difference(n) :  \r\n","out":"S = (n*(n + 1))\/\/2;  \r\n    res = S*(S-1);  \r\n    return res;"}
{"in":"from typing import List\n\"\"\"\n与えられた配列をマージ・ソートで並べ替える関数を書きなさい。\n\"\"\"\ndef merge(a,b):\r\n","out":"c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)\/\/2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)"}
{"in":"from typing import List\n\"\"\"\n文字'p'で始まる単語のリストから2つの単語をマッチさせる関数を書きなさい。\n\"\"\"\ndef start_withp(words):\r\n","out":"for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"}
{"in":"from typing import List\n\"\"\"\nリスト内の変換可能な要素をすべて float に変換する関数を書きなさい。\n\"\"\"\ndef list_to_float(test_list):\r\n","out":"res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res))"}
{"in":"from typing import List\n\"\"\"\nすべてのビットが与えられた範囲内にあるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \r\n","out":"num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"}
{"in":"from typing import List\n\"\"\"\nヒープキューアルゴリズムを使って、与えられた数のリストから最大の整数を求める関数を書きなさい。\n\"\"\"\ndef heap_queue_largest(nums,n):\r\n","out":"largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの連続した数を加算する関数を書きなさい。\n\"\"\"\ndef add_consecutive_nums(nums):\r\n","out":"result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた辺から三角形の型を求める python 関数を書きなさい。\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c): \r\n","out":"sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\")"}
{"in":"from typing import List\n\"\"\"\n与えられた配列から最も小さい欠損数を求める python 関数を書きなさい。\n\"\"\"\ndef find_First_Missing(array,start,end): \r\n","out":"if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) \/ 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルに対して数学的なビット単位のxor演算を行う関数を書きなさい。\n\"\"\"\ndef bitwise_xor(test_tup1, test_tup2):\r\n","out":"res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nパターン配列で与えられたシーケンスに従うかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef is_samepatterns(colors, patterns):    \r\n","out":"if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"}
{"in":"from typing import List\n\"\"\"\n文字列の引用符の間の値を抽出する関数を書く。\n\"\"\"\ndef extract_values(text):\r\n","out":"return (re.findall(r'\"(.*?)\"', text))"}
{"in":"from typing import List\n\"\"\"\nキャメルケース文字列をスネークケース文字列に変換する関数を書きなさい。\n\"\"\"\ndef camel_to_snake(text):\r\n","out":"import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}
{"in":"from typing import List\n\"\"\"\n数値を特定の桁に切り上げる関数を書く。\n\"\"\"\ndef round_up(a, digits):\r\n","out":"n = 10**-digits\r\n    return round(math.ceil(a \/ n) * n, digits)"}
{"in":"from typing import List\n\"\"\"\n風寒指数を計算する関数を書く。\n\"\"\"\ndef wind_chill(v,t):\r\n","out":"windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"}
{"in":"from typing import List\n\"\"\"\n与えられた数の階乗の下一桁を求める python 関数を書きなさい。\n\"\"\"\ndef last_Digit_Factorial(n): \r\n","out":"if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"}
{"in":"from typing import List\n\"\"\"\n文字列から与えられた文字の最初と最後を削除する python 関数を書きなさい。\n\"\"\"\ndef remove_Occ(s,ch): \r\n","out":"for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s"}
{"in":"from typing import List\n\"\"\"\n与えられたリストに与えられたタプルを追加する関数を書きなさい。\n\"\"\"\ndef add_lists(test_list, test_tup):\r\n","out":"res = tuple(list(test_tup) + test_list)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのタプルの非類似要素を見つける関数を書きなさい。\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\r\n","out":"res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた辞書から空の項目を削除する関数を書きなさい。\n\"\"\"\ndef drop_empty(dict1):\r\n","out":"dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"}
{"in":"from typing import List\n\"\"\"\n与えられた範囲内の奇数因子を持つ要素の数を求める python 関数を書きなさい。\n\"\"\"\ndef count_Odd_Squares(n,m): \r\n","out":"return int(m**0.5) - int((n-1)**0.5)"}
{"in":"from typing import List\n\"\"\"\nヒープキューアルゴリズムを使って，与えられたデータセットからn個の安い価格アイテムを見つける関数を書きなさい．\n\"\"\"\ndef cheap_items(items,n):\r\n","out":"cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"}
{"in":"from typing import List\n\"\"\"\n与えられた配列中の連続する部分配列の最大の和を求める関数を書きなさい。\n\"\"\"\ndef max_sub_array_sum(a, size):\r\n","out":"max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列から小文字の部分文字列を取り除く関数を書きなさい。\n\"\"\"\ndef remove_lowercase(str1):\r\n","out":"remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストから、単独で出現する要素を抽出する関数を書きなさい。\n\"\"\"\ndef extract_singly(test_list):\r\n","out":"res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n四角錐の表面積を求める python 関数を書きなさい。\n\"\"\"\ndef surface_Area(b,s): \r\n","out":"return 2 * b * s + pow(b,2)"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのタプルのタプル要素のインデックス単位の乗算を実行する関数を書きなさい。\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\r\n","out":"res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n入れ子リストが別の入れ子リストのサブセットであるかどうかをチェックする関数を書いてください。\n\"\"\"\ndef check_subset_list(list1, list2): \r\n","out":"l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist"}
{"in":"from typing import List\n\"\"\"\n入れ子になった混合タプルの偶数要素を抽出する関数を書きなさい。\n\"\"\"\ndef even_ele(test_tuple, even_fnc): \r\n","out":"res = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列中の任意の2つの要素の差の最小値を求める python 関数を書きなさい。\n\"\"\"\ndef find_Min_Diff(arr,n): \r\n","out":"arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff"}
{"in":"from typing import List\n\"\"\"\n与えられた数のデムロ数を求める関数を書きなさい。\n\"\"\"\ndef find_demlo(s): \r\n","out":"l = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res"}
{"in":"from typing import List\n\"\"\"\nタプルリストから最小のk個のレコードを見つける関数を書きなさい。\n\"\"\"\ndef min_k(test_list, K):\r\n","out":"res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた数の倍数でない数列のn番目の数を求めるpython関数を書きなさい。\n\"\"\"\ndef count_no (A,N,L,R): \r\n","out":"count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i)"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列の中の5文字の長い単語をすべて見つける関数を書きなさい。\n\"\"\"\ndef find_long_word(text):\r\n","out":"return (re.findall(r\"\\b\\w{5}\\b\", text))"}
{"in":"from typing import List\n\"\"\"\nヒープ・キュー・アルゴリズムを使って、与えられた要素のリストを昇順にソートする関数を書きなさい。\n\"\"\"\ndef heap_assending(nums):\r\n","out":"hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"}
{"in":"from typing import List\n\"\"\"\nリストのリストから重複を削除する関数を書きなさい。\n\"\"\"\ndef remove_duplicate(list1):\r\n","out":"list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"}
{"in":"from typing import List\n\"\"\"\n与えられたリストのリストの特定の列を合計する関数を書きなさい。\n\"\"\"\ndef sum_column(list1, C):\r\n","out":"result = sum(row[C] for row in list1)\r\n    return result"}
{"in":"from typing import List\n\"\"\"\nタプルのコロンを取得する関数を書く。\n\"\"\"\ndef colon_tuplex(tuplex,m,n):\r\n","out":"tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"}
{"in":"from typing import List\n\"\"\"\nn-1 の調和和を計算する関数を書け。\n\"\"\"\ndef harmonic_sum(n):\r\n","out":"if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 \/ n + (harmonic_sum(n - 1))"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの整数が反対の符号を持つかどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef opposite_Signs(x,y): \r\n","out":"return ((x ^ y) < 0);"}
{"in":"from typing import List\n\"\"\"\n与えられた数がその逆数の2倍より1小さいかどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef rev(num):    \r\n","out":"rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num \/\/ 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)"}
{"in":"from typing import List\n\"\"\"\n二分木が釣り合っているかどうかをチェックする関数を書け。\n\"\"\"\ndef __init__(self, data): \r\n","out":"self.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"}
{"in":"from typing import List\n\"\"\"\n与えられたソートされた配列の中の大多数の要素をチェックする関数を書きなさい。\n\"\"\"\ndef is_majority(arr, n, x):\r\n","out":"i = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n\/\/2) <= (n -1)) and arr[i + n\/\/2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)\/\/2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"}
{"in":"from typing import List\n\"\"\"\n3つの数値の中央値を求める関数を書きなさい。\n\"\"\"\ndef median_numbers(a,b,c):\r\n","out":"if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"}
{"in":"from typing import List\n\"\"\"\nタプルに辞書を追加する関数を書く。\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\r\n","out":"test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup)"}
{"in":"from typing import List\n\"\"\"\n長方形の周囲長を求める関数を書きなさい。\n\"\"\"\ndef rectangle_perimeter(l,b):\r\n","out":"perimeter=2*(l+b)\r\n  return perimeter"}
{"in":"from typing import List\n\"\"\"\nn番目のヤコブスタール数を求める関数を書きなさい。\n\"\"\"\ndef jacobsthal_num(n): \r\n","out":"dp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"}
{"in":"from typing import List\n\"\"\"\ncollectionsモジュールを使って、与えられたリストの要素の頻度を求める関数を書きなさい。\n\"\"\"\ndef freq_element(nums):\r\n","out":"result = Counter(chain.from_iterable(nums))\r\n  return result"}
{"in":"from typing import List\n\"\"\"\n文字列の大文字と小文字を切り替える関数を書いてください。\n\"\"\"\ndef toggle_string(string):\r\n","out":"string1 = string.swapcase()\r\n return string1"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルにkが含まれているかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_K(test_tup, K):\r\n","out":"res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nある数のすべての約数の和を返す関数を書きなさい。\n\"\"\"\ndef sum_div(number):\r\n","out":"divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の最長のビットニック部分配列を求める関数を書きなさい。\n\"\"\"\ndef lbs(arr): \r\n","out":"n = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"}
{"in":"from typing import List\n\"\"\"\nリスト内の負の数を表示する python 関数を書きなさい。\n\"\"\"\ndef neg_nos(list1):\r\n","out":"for num in list1: \r\n    if num < 0: \r\n       return num"}
{"in":"from typing import List\n\"\"\"\n与えられた周期関数の可能な最小値を求める python 関数を書きなさい。\n\"\"\"\ndef floor_Min(A,B,N):\r\n","out":"x = max(B - 1,N)\r\n    return (A*x) \/\/ B"}
{"in":"from typing import List\n\"\"\"\n最初のn個の自然数の3乗の平均を求めるpython関数を書きなさい。\n\"\"\"\ndef find_Average_Of_Cube(n):  \r\n","out":"sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum \/ n, 6)"}
{"in":"from typing import List\n\"\"\"\n与えられた金額に利益と損失がないかをチェックする関数を書く。\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount): \r\n","out":"if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"}
{"in":"from typing import List\n\"\"\"\nnより最も小さい数を求める関数を書きなさい。\n\"\"\"\ndef closest_num(N):\r\n","out":"return (N - 1)"}
{"in":"from typing import List\n\"\"\"\n与えられた素数pのモジュラー逆数がそれ自身に等しい配列要素を数える関数を書きなさい。\n\"\"\"\ndef modular_inverse(arr, N, P):\r\n","out":"current_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"}
{"in":"from typing import List\n\"\"\"\n任意のリストを受け取り、それをヒープ・キュー・アルゴリズムを使ってヒープに変換する関数を書きなさい。\n\"\"\"\ndef raw_heap(rawheap):\r\n","out":"hq.heapify(rawheap)\r\n  return rawheap"}
{"in":"from typing import List\n\"\"\"\n与えられた数が偶数なら真を、そうでなければ偽を返す関数を書きなさい。\n\"\"\"\ndef even_num(x):\r\n","out":"if x%2==0:\r\n     return True\r\n  else:\r\n    return False"}
{"in":"from typing import List\n\"\"\"\nn番目のヤコブスタール・ルーカス数を求める関数を書きなさい。\n\"\"\"\ndef jacobsthal_lucas(n): \r\n","out":"dp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、精度2の小数をチェックする関数を書きなさい。\n\"\"\"\ndef is_decimal(num):\r\n","out":"num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"}
{"in":"from typing import List\n\"\"\"\nn番目のニューマン・シャンクス・ウィリアムズ素数を求める関数を書きなさい。\n\"\"\"\ndef newman_prime(n): \r\n","out":"if n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの最後の要素を最初の位置にシフトする python 関数を書きなさい。\n\"\"\"\ndef move_first(test_list):\r\n","out":"test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"}
{"in":"from typing import List\n\"\"\"\n与えられたp(n, k)の並べ替え係数を計算する関数を書きなさい。\n\"\"\"\ndef permutation_coefficient(n, k): \r\n","out":"P = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k]"}
{"in":"from typing import List\n\"\"\"\n部分列の要素が連続した整数であるような、最も長い部分列の長さを求める関数を書きなさい。\n\"\"\"\ndef find_longest_conseq_subseq(arr, n): \r\n","out":"ans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の中で最も長い回文部分列を見つける関数を書きなさい。\n\"\"\"\ndef lps(str): \r\n","out":"n = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"}
{"in":"from typing import List\n\"\"\"\n与えられたリストから指定された数の要素を取り出す関数を書きなさい。\n\"\"\"\ndef extract_elements(numbers, n):\r\n","out":"result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"}
{"in":"from typing import List\n\"\"\"\n三角形が正三角形かどうかを表示する関数を書きなさい。\n\"\"\"\ndef check_equilateral(x,y,z):\r\n","out":"if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"}
{"in":"from typing import List\n\"\"\"\n与えられた配列がminヒープかどうかをチェックする関数を書く。\n\"\"\"\ndef check_min_heap(arr, i):\r\n","out":"if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列値のリストから指定されたサイズの文字列を取り出す関数を書きなさい。\n\"\"\"\ndef extract_string(str, l):\r\n","out":"result = [e for e in str if len(e) == l] \r\n    return result"}
{"in":"from typing import List\n\"\"\"\n値に基づいて辞書をフィルタリングする関数を書いてください。\n\"\"\"\ndef dict_filter(dict,n):\r\n","out":"result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"}
{"in":"from typing import List\n\"\"\"\n与えられた組の中の2つの数の間の公約数を求めるpython関数を書きなさい。\n\"\"\"\ndef ngcd(x,y):\r\n","out":"i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n\/i):\r\n        result-=1\r\n    i+=1\r\n  return result"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの配列の最長公約数を求める関数を書きなさい。\n\"\"\"\ndef longest_common_subsequence(X, Y, m, n): \r\n","out":"if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、与えられた文字列が大文字、小文字、数字、指定された長さを持つかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_string(str1):\r\n","out":"messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた2進文字列の任意の部分文字列の0と1の数の差の最大値を求める関数を書きなさい。\n\"\"\"\ndef find_length(string, n): \r\n","out":"current_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列中の大文字で始まる単語の間にスペースを入れる関数を書きなさい。\n\"\"\"\ndef capital_words_spaces(str1):\r\n","out":"return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"}
{"in":"from typing import List\n\"\"\"\n与えられた3つの文字列列列の最長共通部分列を求める関数を書きなさい。\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o): \r\n","out":"L = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"}
{"in":"from typing import List\n\"\"\"\n与えられた配列要素のlcmを求める関数を書きなさい。\n\"\"\"\ndef find_lcm(num1, num2): \r\n","out":"if(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)\/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm"}
{"in":"from typing import List\n\"\"\"\n2つの数値を加算し、和の桁数を表示する関数を書きなさい。\n\"\"\"\ndef count_digits(num1,num2):\r\n","out":"number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number \/\/ 10\r\n        count = count + 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n与えられたすべてのタプルレコードの最大要素を求める関数を書きなさい。\n\"\"\"\ndef find_max(test_list):\r\n","out":"res = max(int(j) for i in test_list for j in i)\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n配列の反転を数える python 関数を書きなさい。\n\"\"\"\ndef get_Inv_Count(arr,n): \r\n","out":"inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルのリストを、タプル内の桁数の合計に基づいてソートする関数を書きなさい。\n\"\"\"\ndef count_digs(tup):\r\n","out":"return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"}
{"in":"from typing import List\n\"\"\"\n指定した数の次の最小回文を求める関数を書きなさい。\n\"\"\"\ndef next_smallest_palindrome(num):\r\n","out":"numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"}
{"in":"from typing import List\n\"\"\"\nn 番目の rencontres 数を求める関数を書きなさい。\n\"\"\"\ndef binomial_coeffi(n, k): \r\n","out":"if (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"}
{"in":"from typing import List\n\"\"\"\naの後に3つの'b'が続く文字列にマッチする関数を書きなさい。\n\"\"\"\ndef text_match_three(text):\r\n","out":"patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n指定された累乗の底の全桁の和を計算する関数を書きなさい。\n\"\"\"\ndef power_base_sum(base, power):\r\n","out":"return sum([int(i) for i in str(pow(base, power))])"}
{"in":"from typing import List\n\"\"\"\n10進数を8進数に変換するpython関数を書きなさい。\n\"\"\"\ndef decimal_to_Octal(deciNum):\r\n","out":"octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum \/\/= 8; \r\n    return (octalNum)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の二調性部分配列の最大和を求める関数を書きなさい。\n\"\"\"\ndef max_sum(arr, n): \r\n","out":"MSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルにnone値があるかどうかをチェックする関数を書く。\n\"\"\"\ndef check_none(test_tup):\r\n","out":"res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n文字または文字列を含む文字列の与えられたリストから単語を削除する関数を書く。\n\"\"\"\ndef remove_words(list1, charlist):\r\n","out":"new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"}
{"in":"from typing import List\n\"\"\"\n配列の和を求める python 関数を書きなさい。\n\"\"\"\ndef _sum(arr):  \r\n","out":"sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)"}
{"in":"from typing import List\n\"\"\"\nバビロン法で平方根を計算する関数を書きなさい。\n\"\"\"\ndef babylonian_squareroot(number):\r\n","out":"if(number == 0):\r\n        return 0;\r\n    g = number\/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number\/ g;\r\n        g2 = g;\r\n        g = (g + n)\/2;\r\n    return g;"}
{"in":"from typing import List\n\"\"\"\n二次方程式の解の数を求める python 関数を書きなさい。\n\"\"\"\ndef Check_Solution(a,b,c) : \r\n","out":"if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\")"}
{"in":"from typing import List\n\"\"\"\n与えられたfloat型の文字列をタプルに変換する関数を書きなさい。\n\"\"\"\ndef float_to_tuple(test_str):\r\n","out":"res = tuple(map(float, test_str.split(', ')))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた整数と文字列の混合リストをソートする関数を書きなさい。\n\"\"\"\ndef sort_mixed_list(mixed_list):\r\n","out":"int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"}
{"in":"from typing import List\n\"\"\"\nmap関数を使って、与えられた2つのリストの同じペアを数える関数を書きなさい。\n\"\"\"\ndef count_same_pair(nums1, nums2):\r\n","out":"result = sum(map(eq, nums1, nums2))\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの最初の偶数と奇数の積を求める関数を書きなさい。\n\"\"\"\ndef mul_even_odd(list1):\r\n","out":"first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"}
{"in":"from typing import List\n\"\"\"\n与えられた数が完全平方かどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef is_Perfect_Square(n) :\r\n","out":"i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n \/ i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルのリストから、kで割り切れる要素をすべて持つタプルを見つける関数を書きなさい。\n\"\"\"\ndef find_tuples(test_list, K):\r\n","out":"res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res))"}
{"in":"from typing import List\n\"\"\"\nシングルトンタプルからリストをコピーする python 関数を書きなさい。\n\"\"\"\ndef lcopy(xs):\n","out":"return xs[:]"}
{"in":"from typing import List\n\"\"\"\n平行四辺形の面積を計算する関数を書きなさい。\n\"\"\"\ndef parallelogram_area(b,h):\r\n","out":"area=b*h\r\n  return area"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って最大長のリストを見つける関数を書きなさい。\n\"\"\"\ndef max_length_list(input_list):\r\n","out":"max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"}
{"in":"from typing import List\n\"\"\"\n円形にソートされた配列の回転数を求める関数を書きなさい。\n\"\"\"\ndef find_rotation_count(A):\r\n","out":"(left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) \/\/ 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"}
{"in":"from typing import List\n\"\"\"\n各要素の後に与えられた文字列を追加して、タプルをリストに変換する関数を書きなさい。\n\"\"\"\ndef add_str(test_tup, K):\r\n","out":"res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストのすべての要素を文字列に連結する関数を書きなさい。\n\"\"\"\ndef concatenate_elements(list):\r\n","out":"ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの連続した重複を削除する関数を書きなさい。\n\"\"\"\ndef consecutive_duplicates(nums):\r\n","out":"return [key for key, group in groupby(nums)]"}
{"in":"from typing import List\n\"\"\"\n偶数指数の二項係数の和を求めるpython関数を書きなさい。\n\"\"\"\ndef even_binomial_Coeff_Sum( n): \r\n","out":"return (1 << (n - 1))"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の文字が、隣り合う2つの文字が異なるように並べ替えられるかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef rearange_string(S):\r\n","out":"ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの入れ子になったタプルの要素をインデックス単位で加算する関数を書きなさい。\n\"\"\"\ndef add_nested_tuples(test_tup1, test_tup2):\r\n","out":"res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n16進数が偶数か奇数かをチェックするpython関数を書きなさい。\n\"\"\"\ndef even_or_odd(N): \r\n","out":"l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\")"}
{"in":"from typing import List\n\"\"\"\n与えられた2本の直線が平行かどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef parallel_lines(line1, line2):\r\n","out":"return line1[0]\/line1[1] == line2[0]\/line2[1]"}
{"in":"from typing import List\n\"\"\"\n与えられた月番号に28日が含まれているかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_monthnum_number(monthnum1):\r\n","out":"if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルでレコードの前に出現する要素数を求める関数を書きなさい。\n\"\"\"\ndef count_first_elements(test_tup):\r\n","out":"for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count)"}
{"in":"from typing import List\n\"\"\"\n整数配列から、和が与えられた数に等しいすべての組を見つける関数を書きなさい。\n\"\"\"\ndef get_pairs_count(arr, n, sum):\r\n","out":"count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n立方体の横方向の表面積を求める関数を書きなさい。\n\"\"\"\ndef lateralsurface_cuboid(l,w,h):\r\n","out":"LSA = 2*h*(l+w)\r\n  return LSA"}
{"in":"from typing import List\n\"\"\"\nタプルの各要素を区切り文字で連結する関数を書く。\n\"\"\"\ndef concatenate_tuple(test_tup):\r\n","out":"delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res))"}
{"in":"from typing import List\n\"\"\"\n与えられた値を作るコインの最小枚数を求める関数を書きなさい。\n\"\"\"\ndef min_coins(coins, m, V): \r\n","out":"if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルに対して数学的な除算を行う関数を書きなさい。\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\r\n","out":"res = tuple(ele1 \/\/ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n数の偶数因数の和を求める python 関数を書きなさい。\n\"\"\"\ndef sumofFactors(n) : \r\n","out":"if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n \/\/ i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列中の文字の出現回数をすべて削除する python 関数を書きなさい。\n\"\"\"\ndef remove_Char(s,c) :  \r\n","out":"counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s)"}
{"in":"from typing import List\n\"\"\"\nリストのリストの要素の最大和を求める python 関数を書きなさい。\n\"\"\"\ndef maximum_Sum(list1): \r\n","out":"maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi"}
{"in":"from typing import List\n\"\"\"\nn番目のカタラン数を表す関数を書く。\n\"\"\"\ndef catalan_number(num):\r\n","out":"if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"}
{"in":"from typing import List\n\"\"\"\n文字列の総文字数のアスキー値を求める関数を書きなさい。\n\"\"\"\ndef ascii_value_string(str1):\r\n","out":"for i in range(len(str1)):\r\n   return ord(str1[i])"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の最後の単語の長さを求める python 関数を書きなさい。\n\"\"\"\ndef length_Of_Last_Word(a): \r\n","out":"l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l"}
{"in":"from typing import List\n\"\"\"\naの後に1つ以上のbが続く文字列にマッチする関数を書きなさい。\n\"\"\"\ndef text_match_one(text):\r\n","out":"patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n奇数のセットビットを持つ整数の数を求める python 関数を書きなさい。\n\"\"\"\ndef count_With_Odd_SetBits(n): \r\n","out":"if (n % 2 != 0): \r\n        return (n + 1) \/ 2\r\n    count = bin(n).count('1') \r\n    ans = n \/ 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、与えられた数値リストの負の数の和を計算する関数を書きなさい。\n\"\"\"\ndef sum_negativenum(nums):\r\n","out":"sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルに有効な値がすべて含まれているかどうかをチェックする関数を書く。\n\"\"\"\ndef check_valid(test_tup):\r\n","out":"res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストを指定された数だけ左方向に回転させる関数を書きなさい。\n\"\"\"\ndef rotate_left(list1,m,n):\r\n","out":"result =  list1[m:]+list1[:n]\r\n  return result"}
{"in":"from typing import List\n\"\"\"\n辞書のキーをリストとして取得する関数を書いてください。\n\"\"\"\ndef get_key(dict): \r\n","out":"list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"}
{"in":"from typing import List\n\"\"\"\n階乗がxで割り切れる最初の自然数を求めるpython関数を書きなさい。\n\"\"\"\ndef first_Factorial_Divisible_Number(x): \r\n","out":"i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i"}
{"in":"from typing import List\n\"\"\"\n与えられた数より大きい次の完全平方数を求める python 関数を書きなさい。\n\"\"\"\ndef next_Perfect_Square(N): \r\n","out":"nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのリストから、指定された数の最大積を求める関数を書きなさい。\n\"\"\"\ndef large_product(nums1, nums2, N):\r\n","out":"result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた三角形内の経路の総和の最小値を求める関数を書きなさい。\n\"\"\"\ndef min_sum_path(A): \r\n","out":"memo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"}
{"in":"from typing import List\n\"\"\"\n二項係数の積の和を求めるpython関数を書きなさい。\n\"\"\"\ndef binomial_Coeff(n,k): \r\n","out":"C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1);"}
{"in":"from typing import List\n\"\"\"\n最小の長さを持つサブリストを見つけるpython関数を書きなさい。\n\"\"\"\ndef Find_Min(lst): \r\n","out":"minList = min((x) for x in lst) \r\n    return minList"}
{"in":"from typing import List\n\"\"\"\n1 から n までの 2 乗の要素をらせん状に並べた正方行列を生成する関数を書け。\n\"\"\"\ndef generate_matrix(n):\r\n","out":"if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"}
{"in":"from typing import List\n\"\"\"\nncr%pの値を計算する関数を書きなさい。\n\"\"\"\ndef ncr_modp(n, r, p): \r\n","out":"C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r]"}
{"in":"from typing import List\n\"\"\"\nリスト内の正の数を表示する python 関数を書きなさい。\n\"\"\"\ndef pos_nos(list1):\r\n","out":"for num in list1: \r\n    if num >= 0: \r\n       return num"}
{"in":"from typing import List\n\"\"\"\nコインのおつりを数える関数を書きなさい。\n\"\"\"\ndef coin_change(S, m, n): \r\n","out":"table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1]"}
{"in":"from typing import List\n\"\"\"\naの後に2つから3つの'b'が続く文字列にマッチする関数を書きなさい。\n\"\"\"\ndef text_match_two_three(text):\r\n","out":"patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"in":"from typing import List\n\"\"\"\na の階乗が b の階乗を割るときの最後の桁を求める python 関数を書きなさい。\n\"\"\"\ndef compute_Last_Digit(A,B): \r\n","out":"variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"}
{"in":"from typing import List\n\"\"\"\n与えられた非負の配列について，k より小さい積を持つ部分配列の数を求める関数を書きなさい．\n\"\"\"\ndef no_of_subsequences(arr, k): \r\n","out":"n = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i \/\/ arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"}
{"in":"from typing import List\n\"\"\"\nエントリンガー数e(n, k)を求める関数を書きなさい。\n\"\"\"\ndef zigzag(n, k): \r\n","out":"if (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"}
{"in":"from typing import List\n\"\"\"\nリストの平均を求める python 関数を書きなさい。\n\"\"\"\ndef Average(lst): \r\n","out":"return sum(lst) \/ len(lst)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストのすべてのサブリストを生成する関数を書きなさい。\n\"\"\"\ndef sub_lists(my_list):\r\n","out":"subs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"}
{"in":"from typing import List\n\"\"\"\nリストのリストを、内側のリストの与えられたインデックスでソートする関数を書きなさい。\n\"\"\"\ndef index_on_inner_list(list_data, index_no):\r\n","out":"result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n犬の年齢を犬の年で計算する関数を書きなさい。\n\"\"\"\ndef dog_age(h_age):\r\n","out":"if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"}
{"in":"from typing import List\n\"\"\"\n文字のascii値を求める関数を書きなさい。\n\"\"\"\ndef ascii_value(k):\r\n","out":"ch=k\r\n  return ord(ch)"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、数字のリストからmとnで割り切れる数を求める関数を書きなさい。\n\"\"\"\ndef div_of_nums(nums,m,n):\r\n","out":"result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"}
{"in":"from typing import List\n\"\"\"\n辞書で最もよく使われる単語を数える関数を書きなさい。\n\"\"\"\ndef count_common(words):\r\n","out":"word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)"}
{"in":"from typing import List\n\"\"\"\nn の倍数 m を求める関数を書きなさい。\n\"\"\"\ndef multiples_of_num(m,n): \r\n","out":"multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストから指定されたインデックスの複数の要素にアクセスする python 関数を書きなさい。\n\"\"\"\ndef access_elements(nums, list_index):\r\n","out":"result = [nums[i] for i in list_index]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n文字列を文字に分割する python 関数を書きなさい。\n\"\"\"\ndef split(word): \r\n","out":"return [char for char in word]"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのタプルから要素ごとにタプルを抽出する関数を書きなさい。\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\r\n","out":"res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n奇数値を持つ2進文字列の回転数を求めるpython関数を書きなさい。\n\"\"\"\ndef odd_Equivalent(s,n): \r\n","out":"count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\nタプルの項目を取得する関数を書く。\n\"\"\"\ndef get_item(tup1,index):\r\n","out":"item = tup1[index]\r\n  return item"}
{"in":"from typing import List\n\"\"\"\n与えられた3つのリストの同じペアを数える関数を書きなさい。\n\"\"\"\ndef count_samepair(list1,list2,list3):\r\n","out":"result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n円柱の体積を求める関数を書きなさい。\n\"\"\"\ndef volume_cylinder(r,h):\r\n","out":"volume=3.1415*r*r*h\r\n  return volume"}
{"in":"from typing import List\n\"\"\"\n与えられた数がアームストロングかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef armstrong_number(number):\r\n","out":"sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp \/\/ 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp \/\/= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"}
{"in":"from typing import List\n\"\"\"\n与えられた配列中の最高度数と最低度数の差を求める python 関数を書きなさい。\n\"\"\"\ndef find_Diff(arr,n): \r\n","out":"arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count"}
{"in":"from typing import List\n\"\"\"\n与えられたリストから最大の正数を求める python 関数を書きなさい。\n\"\"\"\ndef largest_pos(list1): \r\n","out":"max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"}
{"in":"from typing import List\n\"\"\"\n与えられた非負数より小さい素数の数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Primes_nums(n):\r\n","out":"ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"}
{"in":"from typing import List\n\"\"\"\n最大k回の株式取引から得られる利益の最大値を求める関数を書きなさい。\n\"\"\"\ndef max_profit(price, k):\r\n","out":"n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"}
{"in":"from typing import List\n\"\"\"\nmapとラムダ関数を使って、2つのリストを入れ替える関数を書きなさい。\n\"\"\"\ndef sub_list(nums1,nums2):\r\n","out":"result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列中の大文字を数える python 関数を書きなさい。\n\"\"\"\ndef upper_ctr(str):\r\n","out":"upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルから重複を取り除く関数を書きなさい。\n\"\"\"\ndef remove_tuple(test_tup):\r\n","out":"res = tuple(set(test_tup))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの文字列の各サブリストをソートする関数を書きなさい。\n\"\"\"\ndef sort_sublists(list1):\r\n","out":"result = list(map(sorted,list1)) \r\n    return result"}
{"in":"from typing import List\n\"\"\"\nラジアンを度に変換する関数を書きなさい。\n\"\"\"\ndef degree_radian(radian):\r\n","out":"degree = radian*(180\/math.pi)\r\n return degree"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの各要素の頻度を求める関数を書きなさい。\n\"\"\"\ndef freq_element(test_tup):\r\n","out":"res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res)))"}
{"in":"from typing import List\n\"\"\"\nヒープキューアルゴリズムを用いて、与えられたサイズkの素数リストからn番目の超醜数を求める関数を書きなさい。\n\"\"\"\ndef nth_super_ugly_number(n, primes):\r\n","out":"uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"}
{"in":"from typing import List\n\"\"\"\n等差数列の和を求める関数を書きなさい。\n\"\"\"\ndef ap_sum(a,n,d):\r\n","out":"total = (n * (2 * a + (n - 1) * d)) \/ 2\r\n  return total"}
{"in":"from typing import List\n\"\"\"\n配列に含まれる要素が1つだけかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef unique_Element(arr,n):\r\n","out":"s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"}
{"in":"from typing import List\n\"\"\"\n与えられたリストから、別のリストに存在する要素をすべて削除する関数を書きなさい。\n\"\"\"\ndef remove_elements(list1, list2):\r\n","out":"result = [x for x in list1 if x not in list2]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n二次方程式の根が互いに逆数かどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef Check_Solution(a,b,c): \r\n","out":"if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\");"}
{"in":"from typing import List\n\"\"\"\nそれらのlcmが与えられた範囲内にあるような、2つの異なる数を求めるpython関数を書きなさい。\n\"\"\"\ndef answer(L,R): \r\n","out":"if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1)"}
{"in":"from typing import List\n\"\"\"\n与えられた式が釣り合っているかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_expression(exp):\r\n","out":"if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"}
{"in":"from typing import List\n\"\"\"\nn 本の支柱と k 色のフェンスについて、隣り合う 2 本の支柱の色が同じになるようなフェンスの塗り方の数を求める関数を書きなさい。\n\"\"\"\ndef count_no_of_ways(n, k): \r\n","out":"dp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"}
{"in":"from typing import List\n\"\"\"\n2つの数の余りを求める python 関数を書きなさい。\n\"\"\"\ndef find(n,m):\r\n","out":"r = n%m\r\n  return (r)"}
{"in":"from typing import List\n\"\"\"\n配列の乗算を n で割った余りを求める python 関数を書きなさい。\n\"\"\"\ndef find_remainder(arr, lens, n): \r\n","out":"mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの要素のすべての可能な組み合わせを見つける関数を書きなさい。\n\"\"\"\ndef combinations_list(list1):\r\n","out":"if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\nxor が奇数であるペアを数える python 関数を書きなさい。\n\"\"\"\ndef find_Odd_Pair(A,N) : \r\n","out":"oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair"}
{"in":"from typing import List\n\"\"\"\nタプルをフロート要素でソートする関数を書きなさい。\n\"\"\"\ndef float_sort(price):\r\n","out":"float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのリストをzipにする関数を書きなさい。\n\"\"\"\ndef zip_list(list1,list2):  \r\n","out":"result = list(map(list.__add__, list1, list2)) \r\n return result"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの最大値のインデックス位置をすべて求める関数を書きなさい。\n\"\"\"\ndef position_max(list1):\r\n","out":"max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の反転数を数える関数を書きなさい。\n\"\"\"\ndef get_inv_count(arr, n): \r\n","out":"inv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count"}
{"in":"from typing import List\n\"\"\"\n立方体の表面積を求める関数を書きなさい。\n\"\"\"\ndef surfacearea_cuboid(l,w,h):\r\n","out":"SA = 2*(l*w + l * h + w * h)\r\n  return SA"}
{"in":"from typing import List\n\"\"\"\n番目とn番目のビットがセットされている数を数えるpython関数を書きなさい。\n\"\"\"\ndef count_Num(n): \r\n","out":"if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count"}
{"in":"from typing import List\n\"\"\"\n三角形が二等辺三角形かどうかを表示する関数を書きなさい。\n\"\"\"\ndef check_isosceles(x,y,z):\r\n","out":"if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"}
{"in":"from typing import List\n\"\"\"\nリストのリストの度数を求める関数を書きなさい。\n\"\"\"\ndef frequency_lists(list1):\r\n","out":"list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data"}
{"in":"from typing import List\n\"\"\"\n正方形の内側にある積分座標の数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Intgral_Points(x1,y1,x2,y2): \r\n","out":"return ((y2 - y1 - 1) * (x2 - x1 - 1))"}
{"in":"from typing import List\n\"\"\"\n幾何級数系列の和を求める関数を書きなさい。\n\"\"\"\ndef sum_gp(a,n,r):\r\n","out":"total = (a * (1 - math.pow(r, n ))) \/ (1- r)\r\n return total"}
{"in":"from typing import List\n\"\"\"\n与えられた数のリストから最初の奇数を求める python 関数を書きなさい。\n\"\"\"\ndef first_odd(nums):\r\n","out":"first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"}
{"in":"from typing import List\n\"\"\"\n奇数回出現する要素を見つける python 関数を書きなさい。\n\"\"\"\ndef get_Odd_Occurrence(arr,arr_size):   \r\n","out":"for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"}
{"in":"from typing import List\n\"\"\"\n2つのリストを受け取り、それらが少なくとも1つの共通要素を持つ場合に真を返す関数を書きなさい。\n\"\"\"\ndef common_element(list1, list2):\r\n","out":"result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"}
{"in":"from typing import List\n\"\"\"\nソートされた配列から足りない数を見つける python 関数を書きなさい。\n\"\"\"\ndef find_missing(ar,N): \r\n","out":"l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) \/ 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1)"}
{"in":"from typing import List\n\"\"\"\n正規表現を使ってurlが有効かどうかをチェックする関数を書く。\n\"\"\"\ndef is_valid_URL(str):\r\n","out":"regex = (\"((http|https):\/\/)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&\/\/=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&\/\/=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の最大積部分配列を求める関数を書きなさい。\n\"\"\"\ndef max_subarray_product(arr):\r\n","out":"n = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列中の小文字を数える python 関数を書きなさい。\n\"\"\"\ndef lower_ctr(str):\r\n","out":"lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"}
{"in":"from typing import List\n\"\"\"\n与えられた整数が素数かどうかを調べる関数を書きなさい。\n\"\"\"\ndef prime_num(num):\r\n","out":"if num >=1:\r\n   for i in range(2, num\/\/2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"}
{"in":"from typing import List\n\"\"\"\nタプル内に要素が存在するかどうかをチェックする関数を書く。\n\"\"\"\ndef check_tuplex(tuplex,tuple1): \r\n","out":"if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"}
{"in":"from typing import List\n\"\"\"\nn番目の10進数を求める関数を書きなさい。\n\"\"\"\ndef is_num_decagonal(n): \r\n","out":"return 4 * n * n - 3 * n"}
{"in":"from typing import List\n\"\"\"\n与えられた奇数までの奇数の平均を求める python 関数を書きなさい。\n\"\"\"\ndef average_Odd(n) : \r\n","out":"if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm\/\/count"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って2つの配列の交点を求める関数を書きなさい。\n\"\"\"\ndef intersection_array(array_nums1,array_nums2):\r\n","out":"result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"}
{"in":"from typing import List\n\"\"\"\n与えられた数値を特定の数値の倍数に丸める関数を書きなさい。\n\"\"\"\ndef round_num(n,m):\r\n","out":"a = (n \/\/m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"}
{"in":"from typing import List\n\"\"\"\n任意の配列において、k の差を持つすべての異なる組を数える関数を書きなさい。\n\"\"\"\ndef count_pairs(arr, n, k):\r\n","out":"count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの中で最大の出現回数を持つ項目を見つけるpython関数を書きなさい。\n\"\"\"\ndef max_occurrences(nums):\r\n","out":"max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"}
{"in":"from typing import List\n\"\"\"\n最初のn個の自然数の2乗和と最初のn個の自然数の2乗和の差を計算する関数を書きなさい。\n\"\"\"\ndef sum_difference(n):\r\n","out":"sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"}
{"in":"from typing import List\n\"\"\"\nあるバイナリ文字列を別のバイナリ文字列に変換するのに必要なスワップの最小数を求める python 関数を書きなさい。\n\"\"\"\ndef min_Swaps(str1,str2) : \r\n","out":"count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count \/\/ 2) \r\n    else : \r\n        return (\"Not Possible\")"}
{"in":"from typing import List\n\"\"\"\n立方体の表面積を求める関数を書きなさい。\n\"\"\"\ndef surfacearea_cube(l):\r\n","out":"surfacearea= 6*l*l\r\n  return surfacearea"}
{"in":"from typing import List\n\"\"\"\n与えられた2進文字列を交互に並んだ文字列にするのに必要な反転回数を求める関数を書きなさい。\n\"\"\"\ndef make_flip(ch): \r\n","out":"return '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1'))"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、与えられた文字列が特定の文字（この場合はa-z、a-z、0-9）のみを含むかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef is_allowed_specific_char(string):\r\n","out":"get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、小文字とアンダースコアの組み合わせを検索する関数を書きなさい。\n\"\"\"\ndef text_match(text):\r\n","out":"patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n円の円周を求める関数を書きなさい。\n\"\"\"\ndef circle_circumference(r):\r\n","out":"perimeter=2*3.1415*r\r\n  return perimeter"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの中で、n番目の値と(n+1)番目の値、(n+1)番目の値とn番目の値の位置を交換する関数を書きなさい。\n\"\"\"\ndef exchange_elements(lst):\r\n","out":"lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"}
{"in":"from typing import List\n\"\"\"\n与えられた配列内のすべての数値の組の xor の和を求める python 関数を書きなさい。\n\"\"\"\ndef pair_OR_Sum(arr,n) : \r\n","out":"ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans"}
{"in":"from typing import List\n\"\"\"\n与えられた数について、数を再帰的に3分割し、それらを合計することによってできる最大の和を求める関数を書きなさい。\n\"\"\"\ndef breakSum(n): \r\n","out":"dp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i\/2)] + dp[int(i\/3)] + dp[int(i\/4)], i); \r\n\treturn dp[n]"}
{"in":"from typing import List\n\"\"\"\n与えられた3つの整数から等しい数を数える python 関数を書きなさい。\n\"\"\"\ndef test_three_equal(x,y,z):\r\n","out":"result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"}
{"in":"from typing import List\n\"\"\"\n数字の最初と最後のビット以外のビットをトグルする python 関数を書きなさい。\n\"\"\"\ndef set_middle_bits(n):  \r\n","out":"n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列のすべてのスペースを、文字 * リスト項目 * リスト項目 * リスト項目 '%20' に置き換える関数を書きなさい。\n\"\"\"\ndef replace_spaces(string):\r\n","out":"string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"}
{"in":"from typing import List\n\"\"\"\n円柱の表面積を求める関数を書きなさい。\n\"\"\"\ndef surfacearea_cylinder(r,h):\r\n","out":"surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"}
{"in":"from typing import List\n\"\"\"\n与えられた配列から等しい要素のペアを数える python 関数を書きなさい。\n\"\"\"\ndef count_Pairs(arr,n): \r\n","out":"cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt;"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの数の公約数の和を求める python 関数を書きなさい。\n\"\"\"\ndef sum(a,b): \r\n","out":"sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"}
{"in":"from typing import List\n\"\"\"\n与えられたリスト内のタプルのペアから最小積を求める関数を書きなさい。\n\"\"\"\ndef min_product_tuple(list1):\r\n","out":"result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"}
{"in":"from typing import List\n\"\"\"\n文字列を小文字で分割する関数を書きなさい。\n\"\"\"\ndef split_lowerstring(text):\r\n","out":"return (re.findall('[a-z][^a-z]*', text))"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの各リストを反転させる関数を書きなさい。\n\"\"\"\ndef reverse_list_lists(lists):\r\n","out":"for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists"}
{"in":"from typing import List\n\"\"\"\n幾何級数のt-n番目の項を求める関数を書きなさい。\n\"\"\"\ndef tn_gp(a,n,r):\r\n","out":"tn = a * (math.pow(r, n - 1))\r\n  return tn"}
{"in":"from typing import List\n\"\"\"\n左端の未設定ビットを設定する python 関数を書きなさい。\n\"\"\"\ndef set_left_most_unset_bit(n): \r\n","out":"if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos)))"}
{"in":"from typing import List\n\"\"\"\n二項係数を求めるpython関数を書きなさい。\n\"\"\"\ndef binomial_Coeff(n,k): \r\n","out":"if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の要素を並べ替えて、すべての負の要素が正の要素の前に来るようにする関数を書きなさい。\n\"\"\"\ndef re_arrange_array(arr, n):\r\n","out":"j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"}
{"in":"from typing import List\n\"\"\"\nn番目の六角形を求める関数を書きなさい。\n\"\"\"\ndef hexagonal_num(n): \r\n","out":"return n*(2*n - 1)"}
{"in":"from typing import List\n\"\"\"\nn 桁の最小三角数のインデックスを求める python 関数を書きなさい。\n\"\"\"\ndef find_Index(n): \r\n","out":"x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x);"}
{"in":"from typing import List\n\"\"\"\nkのモジュロxがyになるようなkの可能な最大値を求める関数を書きなさい。\n\"\"\"\ndef find_max_val(n, x, y): \r\n","out":"ans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1)"}
{"in":"from typing import List\n\"\"\"\nヒープ・キュー・アルゴリズムを使って、複数のソートされた入力を1つのソートされた反復子にマージする関数を書きなさい。\n\"\"\"\ndef merge_sorted_list(num1,num2,num3):\r\n","out":"num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"}
{"in":"from typing import List\n\"\"\"\nリストのすべての項目が与えられた文字列と等しいかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_element(list,element):\r\n","out":"check_element=all(v== element for v in list)\r\n  return check_element"}
{"in":"from typing import List\n\"\"\"\nmapとラムダ関数を使って2つのリストを加算する関数を書きなさい。\n\"\"\"\ndef add_list(nums1,nums2):\r\n","out":"result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"}
{"in":"from typing import List\n\"\"\"\nリストをタプルに変換する関数を書く。\n\"\"\"\ndef list_tuple(listx):\r\n","out":"tuplex = tuple(listx)\r\n  return tuplex"}
{"in":"from typing import List\n\"\"\"\nリストからランレングスエンコーディングを反映する関数を書く。\n\"\"\"\ndef encode_list(list1):\r\n","out":"return [[len(list(group)), key] for key, group in groupby(list1)]"}
{"in":"from typing import List\n\"\"\"\nカウンタを値でソートする関数を書きなさい。\n\"\"\"\ndef sort_counter(dict1):\r\n","out":"x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"}
{"in":"from typing import List\n\"\"\"\n最初の要素を与えられたリストの末尾にシフトする python 関数を書きなさい。\n\"\"\"\ndef move_last(num_list):\r\n","out":"a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"}
{"in":"from typing import List\n\"\"\"\n3つの点が与えられたとき、三角形が有効かどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \r\n","out":"a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes')"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルの数値の平均値を求める関数を書きなさい。\n\"\"\"\ndef average_tuple(nums):\r\n","out":"result = [sum(x) \/ len(x) for x in zip(*nums)]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列リスト中の逆文字列のペアを数える関数を書きなさい。\n\"\"\"\ndef count_reverse_pairs(test_list):\r\n","out":"res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"}
{"in":"from typing import List\n\"\"\"\nn番目の非角数を求める関数を書きなさい。\n\"\"\"\ndef is_nonagonal(n): \r\n","out":"return int(n * (7 * n - 5) \/ 2)"}
{"in":"from typing import List\n\"\"\"\nマジックスクエアを計算する関数を書く。\n\"\"\"\ndef magic_square_test(my_matrix):\r\n","out":"iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"}
{"in":"from typing import List\n\"\"\"\n小文字をアンダースコアでつないだシーケンスを見つける関数を書きなさい。\n\"\"\"\ndef text_lowercase_underscore(text):\r\n","out":"patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列とリストから新しいタプルを作成する関数を書く。\n\"\"\"\ndef new_tuple(test_list, test_str):\r\n","out":"res = tuple(test_list + [test_str])\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの順序に関係なく、ユニークなタプルの頻度を抽出する関数を書きなさい。\n\"\"\"\ndef extract_freq(test_list):\r\n","out":"res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、数字のリストからmまたはnで割り切れる数を求める関数を書きなさい。\n\"\"\"\ndef div_of_nums(nums,m,n):\r\n","out":"result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"}
{"in":"from typing import List\n\"\"\"\n与えられた配列をシェル・ソートでソートする関数を書きなさい。\n\"\"\"\ndef shell_sort(my_list):\r\n","out":"gap = len(my_list) \/\/ 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap \/\/= 2\r\n\r\n    return my_list"}
{"in":"from typing import List\n\"\"\"\ncollectionsモジュールを使って、一連のキーと値のペアをリストの辞書にグループ化する関数を書きなさい。\n\"\"\"\ndef grouping_dictionary(l):\r\n","out":"d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"}
{"in":"from typing import List\n\"\"\"\n3つのソートされた配列から最も近い3つの要素を見つける関数を書きなさい。\n\"\"\"\ndef find_closet(A, B, C, p, q, r): \r\n","out":"diff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"}
{"in":"from typing import List\n\"\"\"\n再帰を使って n 番目のパーリン数を求める関数を書きなさい。\n\"\"\"\ndef get_perrin(n):\r\n","out":"if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"}
{"in":"from typing import List\n\"\"\"\nつの角を使って三角形の第3の角を求める関数を書け。\n\"\"\"\ndef find_angle(a,b):\r\n","out":"c = 180 - (a + b)\r\n return c"}
{"in":"from typing import List\n\"\"\"\n与えられたリストのリストから空のリストを取り除く関数を書きなさい。\n\"\"\"\ndef remove_empty(list1):\r\n","out":"remove_empty = [x for x in list1 if x]\r\n  return remove_empty"}
{"in":"from typing import List\n\"\"\"\n与えられた空でないタプルのリストから、各タプルの最後の要素でリストを昇順にソートする関数を書きなさい。\n\"\"\"\ndef last(n):\r\n","out":"return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"}
{"in":"from typing import List\n\"\"\"\n最初と最後の文字が同じ部分文字列の数を数える python 関数を書きなさい。\n\"\"\"\ndef check_Equality(s): \r\n","out":"return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result;"}
{"in":"from typing import List\n\"\"\"\nリストから負の数を取り除く python 関数を書きなさい。\n\"\"\"\ndef remove_negs(num_list): \r\n","out":"for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"}
{"in":"from typing import List\n\"\"\"\nタプルの各要素にk個の要素を追加する関数を書く。\n\"\"\"\ndef add_K_element(test_list, K):\r\n","out":"res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nリスト内のすべての数値を掛け合わせ、リストの長さで割る関数を書きなさい。\n\"\"\"\ndef multiply_num(numbers):  \r\n","out":"total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total\/len(numbers)"}
{"in":"from typing import List\n\"\"\"\n与えられた数が起伏しているかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef is_undulating(n): \r\n","out":"if (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"}
{"in":"from typing import List\n\"\"\"\n正規表現を使って、文字列中の少なくとも4文字以上の単語をすべて見つける関数を書きなさい。\n\"\"\"\ndef find_char_long(text):\r\n","out":"return (re.findall(r\"\\b\\w{4,}\\b\", text))"}
{"in":"from typing import List\n\"\"\"\n与えられた金額に損失がある場合、損失額を与える関数を書きなさい、さもなければ何も返さない。\n\"\"\"\ndef loss_amount(actual_cost,sale_amount): \r\n","out":"if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"}
{"in":"from typing import List\n\"\"\"\n円の直径を求める関数を書きなさい。\n\"\"\"\ndef diameter_circle(r):\r\n","out":"diameter=2*r\r\n  return diameter"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って、与えられた数値リストの正の数の和を計算する関数を書きなさい。\n\"\"\"\ndef sum_positivenum(nums):\r\n","out":"sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"}
{"in":"from typing import List\n\"\"\"\nソートされた配列を生成するのに必要な回転数を数える python 関数を書きなさい。\n\"\"\"\ndef count_Rotation(arr,n):   \r\n","out":"for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"}
{"in":"from typing import List\n\"\"\"\n与えられた月番号に30日が含まれているかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_monthnumber_number(monthnum3):\r\n","out":"if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n文字列が少なくとも1つの文字と1つの数字を持つかどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef check_String(str): \r\n","out":"flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n"}
{"in":"from typing import List\n\"\"\"\n与えられた整数のリストから、隣接する要素の組の最大の積を求める python 関数を書きなさい。\n\"\"\"\ndef adjacent_num_product(list_nums):\r\n","out":"return max(a*b for a, b in zip(list_nums, list_nums[1:]))"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの最初の偶数と奇数の除算を求める関数を書きなさい。\n\"\"\"\ndef div_even_odd(list1):\r\n","out":"first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even\/first_odd)"}
{"in":"from typing import List\n\"\"\"\n区間で発生する最大の除数を求める python 関数を書きなさい。\n\"\"\"\ndef find_Divisor(x,y):  \r\n","out":"if (x==y): \r\n        return y \r\n    return 2"}
{"in":"from typing import List\n\"\"\"\n文字列が整数を表すかどうかをチェックする関数を書く。\n\"\"\"\ndef check_integer(text):\r\n","out":"text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"}
{"in":"from typing import List\n\"\"\"\n長方形の面積を求める関数を書きなさい。\n\"\"\"\ndef rectangle_area(l,b):\r\n","out":"area=l*b\r\n  return area"}
{"in":"from typing import List\n\"\"\"\n最初の配列から1つの要素と2番目の配列から1つの要素で構成されるk組の数を求める関数を書きなさい。\n\"\"\"\ndef k_smallest_pairs(nums1, nums2, k):\r\n","out":"queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"}
{"in":"from typing import List\n\"\"\"\nある配列が別の配列の部分集合であるかどうかを調べる関数を書きなさい。\n\"\"\"\ndef is_subset(arr1, m, arr2, n): \r\n","out":"hashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True"}
{"in":"from typing import List\n\"\"\"\n文字列中の偶数文字を削除する関数を書きなさい。\n\"\"\"\ndef remove_even(str1):\r\n","out":"str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストがすべてのk個の要素を持つかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_k_elements(test_list, K):\r\n","out":"res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の最初の繰り返し文字を見つける python 関数を書きなさい。\n\"\"\"\ndef first_repeated_char(str1):\r\n","out":"for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""}
{"in":"from typing import List\n\"\"\"\n最初の n 個の奇数の自然数の 5 乗の和を求める python 関数を書きなさい。\n\"\"\"\ndef odd_Num_Sum(n) : \r\n","out":"j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm"}
{"in":"from typing import List\n\"\"\"\nIPアドレスから先頭のゼロを取り除く関数を書きなさい。\n\"\"\"\ndef removezero_ip(ip):\r\n","out":"string = re.sub('\\.[0]*', '.', ip)\r\n return string"}
{"in":"from typing import List\n\"\"\"\n楕円に内接する最大の三角形を求める関数を書きなさい。\n\"\"\"\ndef largest_triangle(a,b): \r\n","out":"if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) \/ (4 * b);  \r\n    return area"}
{"in":"from typing import List\n\"\"\"\n数の最小の素因数を求める python 関数を書きなさい。\n\"\"\"\ndef smallest_Divisor(n): \r\n","out":"if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n;"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列中の大文字の最大数を求める関数を書きなさい。\n\"\"\"\ndef max_run_uppercase(test_str):\r\n","out":"cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nすべての値をヒープにプッシュし、最小の値を1つずつポップ・オフする関数を書く。\n\"\"\"\ndef heap_sort(iterable):\r\n","out":"h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"}
{"in":"from typing import List\n\"\"\"\n与えられたリストから奇数を取り除く python 関数を書きなさい。\n\"\"\"\ndef remove_odd(l):\r\n","out":"for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"}
{"in":"from typing import List\n\"\"\"\n与えられた配列中の任意の2つの要素間の差の最大値を求める python 関数を書きなさい。\n\"\"\"\ndef max_Abs_Diff(arr,n): \r\n","out":"minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle)"}
{"in":"from typing import List\n\"\"\"\nラムダを使ってタプルのリストをソートする関数を書きなさい。\n\"\"\"\ndef subject_marks(subjectmarks):\r\n","out":"#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列値のリストに部分文字列があるかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef find_substring(str1, sub_str):\r\n","out":"if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"}
{"in":"from typing import List\n\"\"\"\nすべての母音を含む文字列を受け取る python 関数を書きなさい。\n\"\"\"\ndef check(string): \r\n","out":"if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\")"}
{"in":"from typing import List\n\"\"\"\n与えられた数の階乗の下2桁を求める python 関数を書きなさい。\n\"\"\"\ndef last_Two_Digits(N): \r\n","out":"if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac)"}
{"in":"from typing import List\n\"\"\"\n与えられた配列をヒープソートでソートする関数を書きなさい。\n\"\"\"\ndef heap_sort(arr):\r\n","out":"heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) \/\/ 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return"}
{"in":"from typing import List\n\"\"\"\n文字列内のリテラル文字列を検索し、元の文字列内でそのパターンが出現する場所を見つける関数を書きなさい。\n\"\"\"\ndef search_literal(pattern,text):\r\n","out":"match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"}
{"in":"from typing import List\n\"\"\"\nリストの要素が同じかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef chkList(lst): \r\n","out":"return len(set(lst)) == 1"}
{"in":"from typing import List\n\"\"\"\n指定されたテキストの最も一般的な要素とその数を求める関数を書きなさい。\n\"\"\"\ndef most_common_elem(s,a):\r\n","out":"most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルのリストからn番目の要素を抽出する関数を書きなさい。\n\"\"\"\ndef extract_nth_element(list1, n):\r\n","out":"result = [x[n] for x in list1]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の中で奇数回出現する数を求める関数を書きなさい。\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\r\n","out":"for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルリストに存在するすべての値の累積和を求める関数を書きなさい。\n\"\"\"\ndef cummulative_sum(test_list):\r\n","out":"res = sum(map(sum, test_list))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n配列の中に、和が与えられた値に等しい三つ組があるかどうかを調べる関数を書きなさい。\n\"\"\"\ndef find_triplet_array(A, arr_size, sum): \r\n","out":"for i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"}
{"in":"from typing import List\n\"\"\"\n与えられたタプルの中で、同じような頻度で出現するレコードの出現をチェックする関数を書きなさい。\n\"\"\"\ndef check_occurences(test_list):\r\n","out":"res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた2進数を10進数に変換する関数を書きなさい。\n\"\"\"\ndef binary_to_decimal(binary): \r\n","out":"binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary\/\/10\r\n        i += 1\r\n    return (decimal)"}
{"in":"from typing import List\n\"\"\"\n文字列が他の文字列の連結であるかどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef check_Concat(str1,str2):\r\n","out":"N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"}
{"in":"from typing import List\n\"\"\"\n和が 'sum' に等しいペアの数を数える python 関数を書きなさい。\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\r\n","out":"count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列を小文字に変換する python 関数を書きなさい。\n\"\"\"\ndef is_lower(string):\r\n","out":"return (string.lower())"}
{"in":"from typing import List\n\"\"\"\n素数でない数を識別する python 関数を書きなさい。\n\"\"\"\ndef is_not_prime(n):\r\n","out":"result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n各桁の度数がその桁そのものより小さいか等しいかをチェックする python 関数を書きなさい。\n\"\"\"\ndef validate(n): \r\n","out":"for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp \/\/= 10; \r\n    return True"}
{"in":"from typing import List\n\"\"\"\n与えられた月番号に31日が含まれているかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_monthnumb_number(monthnum2):\r\n","out":"if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n与えられた配列の和を持つトリプレットを求める関数を書きなさい。\n\"\"\"\ndef check_triplet(A, n, sum, count):\r\n","out":"if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"}
{"in":"from typing import List\n\"\"\"\nリストの最初と最後の要素を交換する python 関数を書きなさい。\n\"\"\"\ndef swap_List(newList): \r\n","out":"size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList"}
{"in":"from typing import List\n\"\"\"\nパンケーキ・ソートを使って要素のリストをソートする関数を書きなさい。\n\"\"\"\ndef pancake_sort(nums):\r\n","out":"arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"}
{"in":"from typing import List\n\"\"\"\nその配列の増加する部分配列の数を掛け合わせてできる最大の積を求める関数を書きなさい。\n\"\"\"\ndef max_product(arr, n ): \r\n","out":"mpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"}
{"in":"from typing import List\n\"\"\"\n奇数要素を最初に含み、次に偶数要素を含む配列の k 番目の要素を求める python 関数を書きなさい。\n\"\"\"\ndef get_Number(n, k): \r\n","out":"arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1];"}
{"in":"from typing import List\n\"\"\"\n与えられた2つの整数間のハミング距離を求めるpython関数を書きなさい。\n\"\"\"\ndef hamming_Distance(n1,n2) : \r\n","out":"x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits"}
{"in":"from typing import List\n\"\"\"\n入れ子になった混合タプルの要素の頻度を数える関数を書きなさい。\n\"\"\"\ndef flatten(test_tuple): \r\n","out":"for tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\n与えられた数より小さいか等しい2の最大べき乗を求める python 関数を書きなさい。\n\"\"\"\ndef highest_Power_of_2(n): \r\n","out":"res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res;"}
{"in":"from typing import List\n\"\"\"\n与えられた配列を正負交互に並べ替える関数を書きなさい。\n\"\"\"\ndef right_rotate(arr, n, out_of_place, cur):\r\n","out":"temp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"}
{"in":"from typing import List\n\"\"\"\n与えられたリストのすべての偶数インデックスが偶数を含むかどうかをチェックするpython関数を書きなさい。\n\"\"\"\ndef even_position(nums):\r\n","out":"return all(nums[i]%2==i%2 for i in range(len(nums)))"}
{"in":"from typing import List\n\"\"\"\n与えられた数のリストのすべての数を丸め、合計にリストの長さを掛けたものを表示する関数を書きなさい。\n\"\"\"\ndef round_and_sum(list1):\r\n","out":"lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"}
{"in":"from typing import List\n\"\"\"\n与えられた月名が28日を含むかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef check_monthnum(monthname1):\r\n","out":"if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n円柱の周囲長を求める python 関数を書きなさい。\n\"\"\"\ndef perimeter(diameter,height) : \r\n","out":"return 2*(diameter+height)"}
{"in":"from typing import List\n\"\"\"\n与えられた辺の和を持つ立方体の最大体積を求める python 関数を書きなさい。\n\"\"\"\ndef max_volume (s): \r\n","out":"maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue"}
{"in":"from typing import List\n\"\"\"\n与えられた三角形内の経路の合計の最大値を求める関数を書きなさい。\n\"\"\"\ndef max_path_sum(tri, m, n): \r\n","out":"for i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"}
{"in":"from typing import List\n\"\"\"\n整数のリストから重複を表示するpython関数を書きなさい。\n\"\"\"\ndef Repeat(x): \r\n","out":"_size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated"}
{"in":"from typing import List\n\"\"\"\n与えられた入れ子リストの共通要素を見つける関数を書きなさい。* リスト項目 * リスト項目 * リスト項目 * リスト項目\n\"\"\"\ndef common_in_nested_lists(nestedlist):\r\n","out":"result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのタプルの指数計算を行う関数を書きなさい。\n\"\"\"\ndef find_exponentio(test_tup1, test_tup2):\r\n","out":"res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"in":"from typing import List\n\"\"\"\nx,y点座標の6つのタプルを含むリストのリストを返す六角形座標のグリッドを計算する関数を書きなさい。\n\"\"\"\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n","out":"sl = (2 * radius) * math.tan(math.pi \/ 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"}
{"in":"from typing import List\n\"\"\"\n与えられた配列中の最小値の頻度を求める python 関数を書きなさい。\n\"\"\"\ndef frequency_Of_Smallest(n,arr): \r\n","out":"mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq"}
{"in":"from typing import List\n\"\"\"\n数の奇数因数の和を求める python 関数を書きなさい。\n\"\"\"\ndef sum_of_odd_Factors(n): \r\n","out":"res = 1\r\n    while n % 2 == 0: \r\n        n = n \/\/ 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n \/\/ i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res"}
{"in":"from typing import List\n\"\"\"\n同じサイズの2つのソートされた配列の中央値を求める関数を書きなさい。\n\"\"\"\ndef get_median(arr1, arr2, n):\r\n","out":"i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)\/2"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列が2つの交互の文字で構成されているかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef is_Two_Alter(s):  \r\n","out":"for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"}
{"in":"from typing import List\n\"\"\"\n与えられた整数の約数を求める python 関数を書きなさい。\n\"\"\"\ndef divisor(n):\r\n","out":"for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"}
{"in":"from typing import List\n\"\"\"\n角度の弧の長さを計算する関数を書きなさい。\n\"\"\"\ndef arc_length(d,a):\r\n","out":"pi=22\/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a\/360)\r\n    return arclength"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列をソートする python 関数を書きなさい。\n\"\"\"\ndef sort_String(str) : \r\n","out":"str = ''.join(sorted(str)) \r\n    return (str)"}
{"in":"from typing import List\n\"\"\"\n与えられたリストの数を数える python 関数を書きなさい。\n\"\"\"\ndef count_list(input_list): \r\n","out":"return len(input_list)"}
{"in":"from typing import List\n\"\"\"\n与えられた整数の配列から、重複する最初の要素を見つける関数を書きなさい。\n\"\"\"\ndef find_first_duplicate(nums):\r\n","out":"num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"}
{"in":"from typing import List\n\"\"\"\n整数の配列中の正の数の比を求める関数を書きなさい。\n\"\"\"\ndef positive_count(nums):\r\n","out":"n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1\/n,2)"}
{"in":"from typing import List\n\"\"\"\nラムダ関数を使って最小の長さのリストを見つける関数を書きなさい。\n\"\"\"\ndef min_length_list(input_list):\r\n","out":"min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"}
{"in":"from typing import List\n\"\"\"\n与えられた単語のリストからnより長い単語を絞り込む関数を書きなさい。\n\"\"\"\ndef long_words(n, str):\r\n","out":"word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の数字とその位置を区切って表示する関数を書きなさい。\n\"\"\"\ndef num_position(text):\r\n","out":"for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"}
{"in":"from typing import List\n\"\"\"\n与えられた数のパリティを求める python 関数を書きなさい。\n\"\"\"\ndef find_Parity(x): \r\n","out":"y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\");"}
{"in":"from typing import List\n\"\"\"\n指定した数の前の回文を求める関数を書きなさい。\n\"\"\"\ndef previous_palindrome(num):\r\n","out":"for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"}
{"in":"from typing import List\n\"\"\"\n別のリストに存在するネストされたリスト要素を見つける関数を書きなさい。\n\"\"\"\ndef intersection_nested_lists(l1, l2):\r\n","out":"result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"}
{"in":"from typing import List\n\"\"\"\n円錐の横方向の表面積を求める関数を書きなさい。\n\"\"\"\ndef lateralsurface_cone(r,h):\r\n","out":"l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"}
{"in":"from typing import List\n\"\"\"\n最初のnビットの和が最後のnビットの和と同じであるような長さ2nのすべてのバイナリ列の数を求める関数を書きなさい。\n\"\"\"\ndef count_binary_seq(n): \r\n","out":"nCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) \/ r \r\n\t\tres += nCr * nCr \r\n\treturn res"}
{"in":"from typing import List\n\"\"\"\n与えられた2つのリストの共通要素が同じ順序かどうかをチェックする関数を書きなさい。\n\"\"\"\ndef same_order(l1, l2):\r\n","out":"common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"}
{"in":"from typing import List\n\"\"\"\n特定の範囲内にあるリストの要素数を数える関数を書きなさい。\n\"\"\"\ndef count_range_in_list(li, min, max):\r\n","out":"ctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"}
{"in":"from typing import List\n\"\"\"\n文字列を左回転する python 関数を書きなさい。\n\"\"\"\ndef left_rotate(s,d):\r\n","out":"tmp = s[d : ] + s[0 : d]\r\n    return tmp"}
{"in":"from typing import List\n\"\"\"\n複素数の長さを求める関数を書きなさい。\n\"\"\"\ndef len_complex(a,b):\r\n","out":"cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"}
{"in":"from typing import List\n\"\"\"\nサブリストの最小の長さを求める python 関数を書きなさい。\n\"\"\"\ndef Find_Min_Length(lst):  \r\n","out":"minLength = min(len(x) for x in lst )\r\n    return minLength"}
{"in":"from typing import List\n\"\"\"\n級数 1³+2³+3³+...+n³ の和を計算する関数を書け。\n\"\"\"\ndef sum_series(number):\r\n","out":"total = 0\r\n total = math.pow((number * (number + 1)) \/2, 2)\r\n return total"}
{"in":"from typing import List\n\"\"\"\n与えられた配列を、ソートアルゴリズムを使わずにソートする関数を書きなさい。\n\"\"\"\ndef sort_by_dnf(arr, n):\r\n","out":"low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"}
{"in":"from typing import List\n\"\"\"\nオイラー数a(n, m)を求める関数を書きなさい。\n\"\"\"\ndef eulerian_num(n, m): \r\n","out":"if (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"}
{"in":"from typing import List\n\"\"\"\n辞書に格納されている生徒の身長と幅をフィルタリングする関数を書きなさい。\n\"\"\"\ndef filter_data(students,h,w):\r\n","out":"result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result"}
{"in":"from typing import List\n\"\"\"\nリストの各要素の前に要素を挿入する関数を書きなさい。\n\"\"\"\ndef insert_element(list,element):\r\n","out":"list = [v for elt in list for v in (element, elt)]\r\n return list"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列の数値をkだけインクリメントする関数を書きなさい。\n\"\"\"\ndef increment_numerics(test_list, K):\r\n","out":"res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res"}
{"in":"from typing import List\n\"\"\"\n文字列の末尾にある単語にマッチする関数を、句読点（オプション）を含めて書きなさい。\n\"\"\"\ndef text_match_word(text):\r\n","out":"patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"}
{"in":"from typing import List\n\"\"\"\n3つの数の最大値を求める関数を書きなさい。\n\"\"\"\ndef max_of_three(num1,num2,num3): \r\n","out":"if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"}
{"in":"from typing import List\n\"\"\"\n1からnまでのセットビットの合計を数えるpython関数を書きなさい。\n\"\"\"\ndef count_Set_Bits(n) :  \r\n","out":"n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n \/\/ 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n \/\/ powerOf2;  \r\n        cnt += (totalPairs \/\/ 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;"}
{"in":"from typing import List\n\"\"\"\n与えられた文字列が互いに回転しているかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef are_Rotations(string1,string2): \r\n","out":"size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"}
{"in":"from typing import List\n\"\"\"\n円錐の表面積を求める関数を書きなさい。\n\"\"\"\ndef surfacearea_cone(r,h):\r\n","out":"l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"}
{"in":"from typing import List\n\"\"\"\n与えられた数が2乗の差として表現できるかどうかをチェックする python 関数を書きなさい。\n\"\"\"\ndef dif_Square(n): \r\n","out":"if (n % 4 != 2): \r\n        return True\r\n    return False"}
{"in":"from typing import List\n\"\"\"\n与えられたキーが辞書に存在するかどうかをチェックする関数を書きなさい。\n\"\"\"\ndef is_key_present(d,x):\r\n","out":"if x in d:\r\n    return True\r\n  else:\r\n     return False"}
